dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700    1) ######################################################################################88
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700    2) from collections import OrderedDict, Counter
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700    3) import os
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700    4) import sys
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700    5) from os.path import exists
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700    6) from .tcrdist.all_genes import all_genes
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700    7) from .tcrdist.amino_acids import amino_acids
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700    8) from Bio import pairwise2
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700    9) from Bio.SubsMat import MatrixInfo as matlist
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   10) from Bio.pairwise2 import format_alignment
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   11) from .util import path_to_db
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   12) from . import docking_geometry
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   13) from .docking_geometry import DockingGeometry
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   14) from .tcrdock_info import TCRdockInfo
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   15) from . import tcrdist
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   16) from . import superimpose
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   17) from . import tcr_util
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   18) from . import pdblite
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   19) import pandas as pd
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   20) import numpy as np
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   21) import random
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   22) import copy
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   23) from numpy.linalg import norm
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   24) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   25) CLASS2_PEPLEN = 1+9+1
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   26) TCR_CORE_LEN = 13
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   27) ALL_GENES_GAP_CHAR = '.'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   28) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   29) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   30) # human only
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   31) human_structure_alignments = pd.read_table(path_to_db/'new_human_vg_alignments_v1.tsv')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   32) human_structure_alignments.set_index('v_gene', drop=True, inplace=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   33) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   34) # human and mouse
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   35) both_structure_alignments = pd.read_table(path_to_db/'new_both_vg_alignments_v1.tsv')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   36) both_structure_alignments.set_index(['organism','v_gene'], drop=True, inplace=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   37) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   38) def read_fasta(filename): # helper
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   39)     ''' return OrderedDict indexed by the ">" lines (everything after >)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   40)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   41)     data = open(filename, 'rU')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   42)     fasta = OrderedDict()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   43)     for line in data:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   44)         if line[0] == '>':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   45)             seqid = line[1:-1]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   46)             assert seqid not in fasta # no repeats
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   47)             fasta[seqid] = ''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   48)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   49)             l= line.split()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   50)             if l:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   51)                 fasta[seqid] += l[0]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   52)     data.close()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   53)     return fasta
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   54) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   55) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   56) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   57) mhc_class_1_alfas = read_fasta(path_to_db / 'ClassI_prot.alfas')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   58) # add HLA-G 2022-04-30
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   59) mhc_class_1_alfas.update(read_fasta(path_to_db / 'new_imgt_hla/G_prot.alfas'))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   60) # add HLA-E 2022-05-03
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   61) mhc_class_1_alfas.update(read_fasta(path_to_db / 'new_imgt_hla/E_prot.alfas'))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   62) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   63) ks = list(mhc_class_1_alfas.keys())
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   64) lencheck = None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   65) for k in ks:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   66)     newseq = mhc_class_1_alfas[k].replace('-', ALL_GENES_GAP_CHAR)\
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   67)              .replace('X',ALL_GENES_GAP_CHAR)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   68)     mhc_class_1_alfas[k] = newseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   69)     if lencheck is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   70)         lencheck = len(newseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   71)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   72)         assert lencheck == len(newseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   73) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   74) # read mouse sequences (no gaps in them)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   75) # these mouse seqs are not the same length
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   76) mhc_class_1_alfas.update(read_fasta(path_to_db / 'mouse_class1_align.fasta'))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   77) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   78) # v2 means new imgt hla class 2 human alignments/sequences:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   79) mhc_class_2_alfas = {
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   80)     'A': read_fasta(path_to_db / 'both_class_2_A_chains_v2.alfas'),
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   81)     'B': read_fasta(path_to_db / 'both_class_2_B_chains_v2.alfas'),
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   82) }
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   83) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   84) assert all(all(all(x in amino_acids or x==ALL_GENES_GAP_CHAR
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   85)                    for x in seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   86)                for seq in alfas.values())
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   87)            for alfas in [mhc_class_1_alfas, mhc_class_2_alfas['A'],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   88)                          mhc_class_2_alfas['B']])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   89) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   90) # the code below is now redundant since we moved the info files and had applied these
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   91) # changes already
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   92) #
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   93) # complex_pdb_dir = '/home/pbradley/csdat/tcrpepmhc/tcrdock_pdbs/'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   94) # ternary_infofiles = [
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   95) #     complex_pdb_dir+'tcrdock_pdbs_info_class_1_2021-08-05_chainseqs_mhc_alseqs.tsv',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   96) #     complex_pdb_dir+'tcrdock_pdbs_info_class_2_2021-08-05_trimmed_alignseqs.tsv',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   97) # ]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   98) # ternary_info = pd.concat([pd.read_table(x) for x in ternary_infofiles])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700   99) # ternary_info.set_index('pdbid', inplace=True, drop=False)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  100) # def drop_extra_colons(allele):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  101) #     if ',' in allele:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  102) #         a,b = allele.split(',')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  103) #         return drop_extra_colons(a)+','+drop_extra_colons(b)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  104) #     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  105) #         return ':'.join(allele.split(':')[:2])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  106) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  107) # ternary_info['mhc_allele'] = ternary_info.mhc_allele.map(drop_extra_colons)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  108) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  109) # # update mouse allele names-- want these to match the names in mhc_class_1_alfas
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  110) # #
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  111) # for big in 'DKL':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  112) #     for little in 'BD':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  113) #         old = f'{big}-{little}'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  114) #         new = f'H2{big}{little.lower()}'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  115) #         if old in ternary_info.mhc_allele.values:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  116) #             assert new in mhc_class_1_alfas
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  117) #             ternary_info['mhc_allele'] = ternary_info.mhc_allele.replace(old, new)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  118) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  119) # pmhc_infofile = (path_to_db / #'/home/pbradley/gitrepos/TCRpepMHC/tcrdock/db/'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  120) #                  'pdb_mhc_info_class_1_2021-08-05_pdbfiles_alignseqs_w_EG.tsv')#NOTE EG
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  121) # pmhc_info = pd.read_table(pmhc_infofile).set_index('pdbid', drop=False)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  122) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  123) # tcr_infofile = ('/home/pbradley/csdat/tcrpepmhc/amir/'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  124) #                 'all_unbound_tcr_chain_info_both_v1.tsv') # mouse and human
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  125) # tcr_info = pd.read_table(tcr_infofile).set_index(['pdbid','ab'], drop=False)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  126) # tcr_info['ternary'] = tcr_info.pdbid.isin(set(ternary_info.pdbid))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  127) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  128) # TCR, PMHC, TERNARY = 'tcr', 'pmhc', 'ternary'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  129) # all_template_info = {TCR:tcr_info, TERNARY:ternary_info, PMHC:pmhc_info}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  130) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  131) TCR, PMHC, TERNARY = 'tcr', 'pmhc', 'ternary'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  132) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  133) all_template_info = {}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  134) for tag in [TCR, PMHC, TERNARY]:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  135)     info = pd.read_table(path_to_db / f'{tag}_templates_v2.tsv')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  136)     if tag == TCR:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  137)         info.set_index(['pdbid','ab'], drop=False, inplace=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  138)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  139)         info.set_index('pdbid', drop=False, inplace=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  140)     all_template_info[tag] = info
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  141) tcr_info = all_template_info[TCR]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  142) pmhc_info = all_template_info[PMHC]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  143) ternary_info = all_template_info[TERNARY]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  144) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  145) # some new pdbs we recently parsed
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  146) new_ternary_tsvfile = path_to_db / 'new_ternary_templates_2023-06-02.tsv'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  147) new_ternary_info = pd.read_table(new_ternary_tsvfile).set_index('pdbid', drop=False)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  148) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  149) new_pmhc_tsvfile = path_to_db / 'new_pmhc_templates_2023-10-07.tsv'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  150) new_pmhc_info = pd.read_table(new_pmhc_tsvfile).set_index('pdbid', drop=False)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  151) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  152) new_tcr_tsvfile = path_to_db / 'new_tcr_templates_2023-06-02.tsv'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  153) new_tcr_info = pd.read_table(new_tcr_tsvfile).set_index(['pdbid','ab'], drop=False)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  154) mask = [x not in tcr_info.index for x in new_tcr_info.index]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  155) new_tcr_info = new_tcr_info[mask].copy()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  156) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  157) all_template_poses = {TCR:{}, PMHC:{}, TERNARY:{}}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  158) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  159) BAD_DGEOM_PDBIDS = '5sws 7jwi 4jry 4nhu 3tjh 4y19 4y1a 1ymm 2wbj 6uz1'.split()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  160) BAD_PMHC_PDBIDS = '3rgv 4ms8 6v1a 6v19 6v18 6v15 6v13 6v0y 2uwe 2jcc 2j8u 1lp9'.split()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  161) # (new) 6uz1 is engineered and binds down by B2M
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  162) # 3rgv has cterm of peptide out of groove
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  163) # 4ms8 has chainbreaks (should check for those!)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  164) # rest are all human MHC with mouse TCRs...
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  165) ## grep ^both ~/tcr_scripts/tmp.pdb_tcr_mouse.2021-08-05.log  | awk '($4+$6+$8+$10<10)' | grep pdb_files | nsort 16 -r | awk '{print $2, $16}'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  166) # 6v1a 82
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  167) # 6v19 82
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  168) # 6v18 82
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  169) # 6v15 82
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  170) # 6v13 82
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  171) # 6v0y 82
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  172) # 2uwe 72
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  173) # 2jcc 72
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  174) # 2j8u 72
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  175) # 1lp9 72
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  176) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  177) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  178) ######################################################################################88
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  179) ######################################################################################88
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  180) ######################### END I/O ######################################################
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  181) ######################################################################################88
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  182) ######################################################################################88
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  183) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  184) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  185) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  186) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  187) _cached_tcrdisters = {}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  188) def get_tcrdister(organism):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  189)     if organism not in _cached_tcrdisters:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  190)         _cached_tcrdisters[organism] = tcrdist.tcr_distances.TcrDistCalculator(organism)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  191)     return _cached_tcrdisters[organism]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  192) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  193) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  194) def blosum_align(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  195)         seq1,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  196)         seq2,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  197)         gap_open=-11, # https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3848038/
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  198)         gap_extend=-1,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  199)         global_align=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  200)         verbose=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  201) ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  202)     ''' return 0-indexed dictionary mapping from seq1 to seq2 positions
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  203)     '''
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  204)     if not seq1 or not seq2:
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  205)         return {}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  206) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  207)     scorematrix = matlist.blosum62
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  208) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  209)     if global_align:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  210)         alignments = pairwise2.align.globalds(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  211)             seq1, seq2, scorematrix, gap_open, gap_extend)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  212)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  213)         alignments = pairwise2.align.localds(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  214)             seq1, seq2, scorematrix, gap_open, gap_extend)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  215)     # this is annoying, BioPython 1.76 these are vanilla tuples and 1.79 they are named
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  216)     if not alignments:
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  217)         print('sequtil.py: blosum_align failed')
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  218)         assert False
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700  219) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  220)     try:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  221)         alignment = max(alignments, key=lambda x:x.score)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  222)     except AttributeError:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  223)         assert len(alignments[0]) == 5 # seqA, seqB, score, start, end
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  224)         alignment = max(alignments, key=lambda x:x[2])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  225)     alseq1, alseq2, score, begin, end = alignment
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  226) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  227)     if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  228)         print(format_alignment(*alignment))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  229) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  230)     assert alseq1.replace('-','') == seq1
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  231)     assert alseq2.replace('-','') == seq2
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  232) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  233)     align = {}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  234)     for i,(a,b) in enumerate(zip(alseq1, alseq2)):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  235)         if a!= '-' and b!='-':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  236)             #assert begin <= i <= end
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  237)             pos1 = i-alseq1[:i].count('-')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  238)             pos2 = i-alseq2[:i].count('-')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  239)             align[pos1] = pos2
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  240)     return align
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  241) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  242) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  243) # for building pmhc:TCR models from allele/v/j/cdr3 info
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  244) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  245) def get_v_seq_up_to_cys(organism, v_gene):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  246)     vg = all_genes[organism][v_gene]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  247) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  248)     alseq = vg.alseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  249)     cys_alpos = vg.cdr_columns[-1][0]-1 # they were 1-indexed, now 0-indexed
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  250)     if alseq[cys_alpos] != 'C':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  251)         print('notC', alseq[cys_alpos])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  252)     geneseq = alseq[:cys_alpos+1].replace(ALL_GENES_GAP_CHAR, '')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  253)     return geneseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  254) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  255) def get_j_seq_after_cdr3(organism, j_gene):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  256)     jg = all_genes[organism][j_gene]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  257)     alseq = jg.alseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  258)     cdr3seq = jg.cdrs[0]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  259)     assert alseq.startswith(cdr3seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  260)     return alseq[len(cdr3seq):].replace(ALL_GENES_GAP_CHAR,'')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  261) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  262) #A02_seq = 'GSHSMRYFFTSVSRPGRGEPRFIAVGYVDDTQFVRFDSDAASQRMEPRAPWIEQEGPEYWDGETRKVKAHSQTHRVDLGTLRGYYNQSEAGSHTVQRMYGCDVGSDWRFLRGYHQYAYDGKDYIALKEDLRSWTAADMAAQTTKHKWEAAHVAEQLRAYLEGTCVEWLRRYLENGKETLQR'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  263) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  264) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  265) ## borrowed from cdr3s_human.py
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  266) ## 1-indexed:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  267) extra_alignment_columns_1x = { 'mouse':{'A':[9,86],'B':[] }, ## 1-indexed
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  268)                                'human':{'A':[],'B':[] } }
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  269) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  270) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  271) core_positions_generic_1x = [
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  272)     21, 23, 25,   ##  23 is C
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  273)     39, 41,       ##  41 is W
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  274)     53, 54, 55,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  275)     78,           ##            maybe also 80?
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  276)     89,           ##  89 is L
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  277)     102, 103, 104 ## 104 is C
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  278) ]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  279) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  280) all_core_alseq_positions_0x = {}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  281) for organism in extra_alignment_columns_1x:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  282)     for ab,xcols in extra_alignment_columns_1x[organism].items():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  283)         positions = [ x-1+sum(y<=x for y in xcols) # this is not quite right but it wrks
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  284)                       for x in core_positions_generic_1x ]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  285) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  286)         if False:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  287)             for v,g in all_genes[organism].items():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  288)                 if g.chain == ab and g.region == 'V' and v.endswith('*01'):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  289)                     coreseq = ''.join([g.alseq[x] for x in positions])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  290)                     print(coreseq, v, organism, ab)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  291) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  292)         all_core_alseq_positions_0x[(organism,ab)] = positions
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  293) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  294) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  295) def get_core_positions_0x(organism, v_gene):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  296)     vg = all_genes[organism][v_gene]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  297) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  298)     alseq = vg.alseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  299) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  300)     core_positions_0x = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  301)     for pos in all_core_alseq_positions_0x[(organism, vg.chain)]:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  302)         core_positions_0x.append(pos - alseq[:pos].count(ALL_GENES_GAP_CHAR))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  303)     return core_positions_0x
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  304) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  305) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  306) def align_chainseq_to_imgt_msa(organism, chainseq, v_gene):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  307)     #
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  308)     vg = all_genes[organism][v_gene]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  309) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  310)     alseq = vg.alseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  311)     geneseq = get_v_seq_up_to_cys(organism, v_gene)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  312) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  313)     # extends past end of geneseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  314)     geneseq_to_alseq = {k-alseq[:k].count(ALL_GENES_GAP_CHAR) : k
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  315)                         for k,a in enumerate(alseq) if a!=ALL_GENES_GAP_CHAR}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  316) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  317)     chainseq_to_geneseq = blosum_align(chainseq, geneseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  318) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  319)     chainseq_to_alseq = {i:geneseq_to_alseq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  320)                          for i,j in chainseq_to_geneseq.items()}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  321) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  322)     return chainseq_to_alseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  323) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  324) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  325) def align_chainseq_to_structure_msa(organism, chainseq, v_gene, msa_type='both'):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  326)     assert msa_type in ['both','human']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  327) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  328)     if msa_type == 'human':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  329)         assert organism == 'human'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  330)         #assert v_gene in human_structure_alignments.index
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  331)         row = human_structure_alignments.loc[v_gene]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  332)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  333)         row = both_structure_alignments.loc[(organism,v_gene)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  334) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  335)     alseq = row.alseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  336) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  337)     geneseq = get_v_seq_up_to_cys(organism, v_gene)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  338)     assert alseq.replace(ALL_GENES_GAP_CHAR,'') == geneseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  339) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  340)     #
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  341)     geneseq_to_alseq = {k-alseq[:k].count(ALL_GENES_GAP_CHAR) : k
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  342)                         for k,a in enumerate(alseq) if a!=ALL_GENES_GAP_CHAR}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  343) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  344)     chainseq_to_geneseq = blosum_align(chainseq, geneseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  345) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  346)     chainseq_to_alseq = {i:geneseq_to_alseq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  347)                          for i,j in chainseq_to_geneseq.items()}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  348) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  349)     return chainseq_to_alseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  350) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  351) _tcr_alignment_cache = None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  352) def align_tcr_info_pdb_chain_to_structure_msa(pdbid, ab, msa_type_in):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  353)     ''' pdbid,ab has to be in the tcr_info index
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  354)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  355)     global _tcr_alignment_cache
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  356)     assert msa_type_in in ['both','human']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  357)     if _tcr_alignment_cache is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  358)         _tcr_alignment_cache = {
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  359)             'both' :{'A':{}, 'B':{}},
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  360)             'human':{'A':{}, 'B':{}}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  361)         }
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  362)         print('setting up cache for align_tcr_info_pdb_chain_to_structure_msa function')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  363)         my_tcr_info = pd.concat([tcr_info, new_tcr_info])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  364)         for l in my_tcr_info.itertuples():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  365)             geneseq = get_v_seq_up_to_cys(l.organism, l.v_gene)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  366)             for msa_type in ['both', 'human']:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  367)                 if msa_type == 'human':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  368)                     if l.organism != 'human':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  369)                         continue
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  370)                     row = human_structure_alignments.loc[l.v_gene]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  371)                 else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  372)                     row = both_structure_alignments.loc[(l.organism, l.v_gene)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  373)                 alseq = row.alseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  374)                 assert alseq.replace(ALL_GENES_GAP_CHAR,'') == geneseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  375)                 geneseq_to_alseq = {k-alseq[:k].count(ALL_GENES_GAP_CHAR) : k
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  376)                                     for k,a in enumerate(alseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  377)                                     if a!=ALL_GENES_GAP_CHAR}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  378) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  379)                 chainseq_to_geneseq = blosum_align(l.chainseq, geneseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  380) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  381)                 chainseq_to_alseq = {i:geneseq_to_alseq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  382)                                      for i,j in chainseq_to_geneseq.items()}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  383)                 _tcr_alignment_cache[msa_type][l.ab][l.pdbid] = chainseq_to_alseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  384) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  385)         print('DONE setting up cache for align_tcr_info_pdb_chain_to_structure_msa',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  386)               'function')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  387)     return _tcr_alignment_cache[msa_type_in][ab][pdbid]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  388) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  389) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  390) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  391) def align_cdr3s(a, b):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  392)     shortseq, longseq = (a,b) if len(a)<len(b) else (b,a)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  393)     lenshort, lenlong = len(shortseq), len(longseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  394)     assert lenshort >= 5
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  395)     gappos = min( 6, 3 + (lenshort-5)//2 )
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  396)     num_gaps = lenlong-lenshort
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  397)     align = {i:i for i in range(gappos)}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  398)     align.update({i:i+num_gaps for i in range(gappos,lenshort)})
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  399)     if len(a)>=len(b): # reverse
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  400)         align = {j:i for i,j in align.items()}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  401)     return align
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  402) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  403) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  404) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  405) def get_tcr_chain_trim_positions(organism, chainseq, v, j, cdr3):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  406)     ''' could include None if the position is missing (deleted) for this v gene...
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  407)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  408)     assert cdr3 in chainseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  409)     nterm_segment_alseq_positions_0x = [3, 4, 5]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  410)     # 1. imgt alignment 1-index positions 4-6 ([VIL].Q)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  411)     # 2. 1x core positions 0-->9
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  412)     # 3. residue before core pos 10 --> residue after GXG (CDR3 + 4 rsds after)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  413)     vg = all_genes[organism][v]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  414) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  415)     alseq = vg.alseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  416) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  417)     geneseq = get_v_seq_up_to_cys(organism, v)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  418)     assert alseq.replace(ALL_GENES_GAP_CHAR,'').startswith(geneseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  419) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  420)     geneseq_to_chainseq = blosum_align(geneseq, chainseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  421) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  422)     core_positions_0x = get_core_positions_0x(organism, v)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  423)     assert len(core_positions_0x) == TCR_CORE_LEN
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  424) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  425)     geneseq_positions = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  426)     for pos in nterm_segment_alseq_positions_0x:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  427)         if alseq[pos] == ALL_GENES_GAP_CHAR:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  428)             print('N None:', organism, v)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  429)             geneseq_positions.append(None)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  430)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  431)             geneseq_positions.append(pos-alseq[:pos].count(ALL_GENES_GAP_CHAR))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  432) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  433)     start, stop = core_positions_0x[0], core_positions_0x[9] # inclusive!
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  434)     geneseq_positions.extend(range(start, stop+1))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  435) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  436)     chainseq_positions = [geneseq_to_chainseq.get(pos,None)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  437)                           for pos in geneseq_positions]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  438) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  439)     start = geneseq_to_chainseq[core_positions_0x[10]-1]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  440)     stop = chainseq.index(cdr3)+len(cdr3)+3 # index of position after GXG
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  441)     chainseq_positions.extend(range(start, stop+1))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  442) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  443)     if None in chainseq_positions:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  444)         print(organism, v, [i for i,x in enumerate(chainseq_positions) if x is None])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  445) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  446)         blosum_align(geneseq, chainseq, verbose=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  447) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  448) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  449)     return chainseq_positions
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  450) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  451) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  452) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  453) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  454) def align_vgene_to_template_pdb_chain(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  455)         ab,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  456)         trg_organism,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  457)         trg_v,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  458)         trg_j,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  459)         trg_cdr3,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  460)         trg_msa_alignments,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  461)         tmp_pdbid,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  462)         # tmp_organism,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  463)         # tmp_v,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  464)         # tmp_j,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  465)         # tmp_cdr3,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  466)         # tmp_chainseq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  467)         verbose=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  468) ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  469)     ''' Returns trg_to_tmp, trg_chainseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  470) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  471)     trg_to_tmp is 0-indexed dict aligning trg_chainseq to tmp_chainseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  472) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  473)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  474)     # align trg_vg to nearest rep (trg_rep) in structure MSA
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  475)     # align tmp_vg to nearest rep (tmp_rep) in structure MSA
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  476)     # use structure MSA to create alignment between trg_rep and tmp_rep
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  477)     # use IMGT MSA to align before the first cys??
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  478)     # align cdr3 with gaps in the middle
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  479)     # align jgenes
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  480) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  481)     if (tmp_pdbid,ab) in tcr_info.index:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  482)         tmp_row = tcr_info.loc[(tmp_pdbid,ab)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  483)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  484)         tmp_row = new_tcr_info.loc[(tmp_pdbid,ab)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  485) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  486)     tmp_organism = tmp_row.organism
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  487)     tmp_chainseq = tmp_row.chainseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  488)     tmp_cdr3 = tmp_row.cdr3
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  489) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  490)     trg_vseq = get_v_seq_up_to_cys(trg_organism, trg_v)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  491)     trg_jseq = get_j_seq_after_cdr3(trg_organism, trg_j)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  492) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  493)     trg_chainseq = trg_vseq[:-1] + trg_cdr3 + trg_jseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  494) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  495)     # align V regions
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  496)     msa_type = ('human' if trg_organism=='human' and tmp_organism=='human' else
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  497)                 'both')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  498) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  499)     trg_vseq_to_alseq = trg_msa_alignments[msa_type]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  500) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  501)     # trg_vseq_to_alseq_old = align_chainseq_to_structure_msa(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  502)     #     trg_organism, trg_chainseq, trg_v, msa_type=msa_type)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  503) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  504)     # assert (sorted(trg_vseq_to_alseq.items()) ==
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  505)     #         sorted(trg_vseq_to_alseq_old.items()))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  506)     #print(tmp_pdbid, tmp_organism, ab, msa_type)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  507)     tmp_vseq_to_alseq = align_tcr_info_pdb_chain_to_structure_msa(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  508)         tmp_pdbid, ab, msa_type)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  509) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  510)     # tmp_vseq_to_alseq_old = align_chainseq_to_structure_msa(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  511)     #     tmp_organism, tmp_chainseq, tmp_row.v_gene, msa_type=msa_type)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  512)     # for i in sorted(set(tmp_vseq_to_alseq.keys())|
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  513)     #                 set(tmp_vseq_to_alseq_old.keys())):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  514)     #     j = tmp_vseq_to_alseq.get(i,-1)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  515)     #     k = tmp_vseq_to_alseq_old.get(i,-1)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  516)     #     print(f'{tmp_row.chainseq[i]} {i:4d} {j:4d} {k:4d}')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  517)     # assert (sorted(tmp_vseq_to_alseq.items()) ==
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  518)     #         sorted(tmp_vseq_to_alseq_old.items()))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  519) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  520)     alseq_to_tmp_vseq = {j:i for i,j in tmp_vseq_to_alseq.items()}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  521) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  522)     trg_to_tmp = {} # alignment over this TCR chain, 0-indexed
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  523)     for i,j in trg_vseq_to_alseq.items():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  524)         if j in alseq_to_tmp_vseq:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  525)             trg_to_tmp[i]=alseq_to_tmp_vseq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  526) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  527)     # align cdr3 regions
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  528)     assert trg_vseq[-1] == 'C'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  529)     trg_offset = len(trg_vseq)-1 # skip 'C'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  530)     tmp_offset = tmp_chainseq.index(tmp_cdr3)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  531) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  532)     al = align_cdr3s(trg_cdr3, tmp_cdr3)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  533)     trg_to_tmp.update({i+trg_offset:j+tmp_offset
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  534)                        for i,j in al.items()})
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  535)     trg_offset += len(trg_cdr3)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  536)     tmp_offset += len(tmp_cdr3)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  537) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  538) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  539)     # align j region
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  540)     tmp_jseq= tmp_chainseq[tmp_chainseq.index(tmp_cdr3)+
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  541)                            len(tmp_cdr3):]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  542)     if (trg_jseq[:3]+tmp_jseq[:3]).count('G') < 4:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  543)         print('GXGs?', trg_jseq[:3], tmp_jseq[:3])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  544)     for i in range(min(len(trg_jseq), len(tmp_jseq))):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  545)         trg_to_tmp[trg_offset+i] = tmp_offset+i
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  546) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  547)     identities = sum(trg_chainseq[i]==tmp_chainseq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  548)                      for i,j in trg_to_tmp.items())/len(trg_chainseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  549)     if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  550)         print(f'align_vgene_to_template_pdb_chain: {identities:6.3f}',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  551)               trg_v, tmp_v, trg_cdr3, tmp_cdr3, verbose=verbose)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  552) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  553)     return trg_to_tmp, trg_chainseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  554) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  555) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  556) # def old_align_vgene_to_template_pdb_chain(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  557) #         ab,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  558) #         trg_organism,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  559) #         trg_v,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  560) #         trg_j,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  561) #         trg_cdr3,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  562) #         tmp_organism,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  563) #         tmp_v,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  564) #         tmp_j,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  565) #         tmp_cdr3,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  566) #         tmp_chainseq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  567) #         verbose=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  568) # ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  569) #     ''' Returns trg_to_tmp, trg_chainseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  570) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  571) #     trg_to_tmp is 0-indexed dict aligning trg_chainseq to tmp_chainseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  572) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  573) #     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  574) #     # align trg_vg to nearest rep (trg_rep) in structure MSA
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  575) #     # align tmp_vg to nearest rep (tmp_rep) in structure MSA
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  576) #     # use structure MSA to create alignment between trg_rep and tmp_rep
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  577) #     # use IMGT MSA to align before the first cys??
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  578) #     # align cdr3 with gaps in the middle
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  579) #     # align jgenes
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  580) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  581) #     trg_vseq = get_v_seq_up_to_cys(trg_organism, trg_v)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  582) #     trg_jseq = get_j_seq_after_cdr3(trg_organism, trg_j)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  583) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  584) #     trg_chainseq = trg_vseq[:-1] + trg_cdr3 + trg_jseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  585) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  586) #     # align V regions
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  587) #     msa_type = ('human' if trg_organism=='human' and tmp_organism=='human' else
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  588) #                 'both')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  589) #     trg_vseq_to_alseq = align_chainseq_to_structure_msa(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  590) #         trg_organism, trg_chainseq, trg_v, msa_type=msa_type)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  591) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  592) #     tmp_vseq_to_alseq = align_chainseq_to_structure_msa(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  593) #         tmp_organism, tmp_chainseq, tmp_v, msa_type=msa_type)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  594) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  595) #     alseq_to_tmp_vseq = {j:i for i,j in tmp_vseq_to_alseq.items()}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  596) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  597) #     trg_to_tmp = {} # alignment over this TCR chain, 0-indexed
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  598) #     for i,j in trg_vseq_to_alseq.items():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  599) #         if j in alseq_to_tmp_vseq:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  600) #             trg_to_tmp[i]=alseq_to_tmp_vseq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  601) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  602) #     # align cdr3 regions
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  603) #     assert trg_vseq[-1] == 'C'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  604) #     trg_offset = len(trg_vseq)-1 # skip 'C'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  605) #     tmp_offset = tmp_chainseq.index(tmp_cdr3)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  606) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  607) #     al = align_cdr3s(trg_cdr3, tmp_cdr3)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  608) #     trg_to_tmp.update({i+trg_offset:j+tmp_offset
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  609) #                        for i,j in al.items()})
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  610) #     trg_offset += len(trg_cdr3)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  611) #     tmp_offset += len(tmp_cdr3)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  612) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  613) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  614) #     # align j region
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  615) #     tmp_jseq= tmp_chainseq[tmp_chainseq.index(tmp_cdr3)+
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  616) #                            len(tmp_cdr3):]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  617) #     if (trg_jseq[:3]+tmp_jseq[:3]).count('G') < 4:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  618) #         print('GXGs?', trg_jseq[:3], tmp_jseq[:3])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  619) #     for i in range(min(len(trg_jseq), len(tmp_jseq))):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  620) #         trg_to_tmp[trg_offset+i] = tmp_offset+i
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  621) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  622) #     identities = sum(trg_chainseq[i]==tmp_chainseq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  623) #                      for i,j in trg_to_tmp.items())/len(trg_chainseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  624) #     if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  625) #         print(f'align_vgene_to_template_pdb_chain: {identities:6.3f}',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  626) #               trg_v, tmp_v, trg_cdr3, tmp_cdr3, verbose=verbose)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  627) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  628) #     return trg_to_tmp, trg_chainseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  629) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  630) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  631) def get_mhc_class_1_alseq(allele):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  632)     if allele in mhc_class_1_alfas:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  633)         return mhc_class_1_alfas[allele]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  634)     sortl = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  635)     for k in mhc_class_1_alfas:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  636)         if k.startswith(allele) and k[len(allele)] == ':':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  637)             suffix = [int(x) if x.isdigit() else 100
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  638)                       for x in k[len(allele)+1:].split(':')]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  639)             sortl.append((suffix, k))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  640)     if sortl:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  641)         sortl.sort()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  642)         best_allele = sortl[0][1]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  643)         #print('close allele:', allele, best_allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  644)         return mhc_class_1_alfas[best_allele]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  645)     elif allele.count(':')>1:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  646)         trim_allele = ':'.join(allele.split(':')[:2])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  647)         return get_mhc_class_1_alseq(trim_allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  648)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  649)         print('ERROR: get_mhc_class_1_alseq: unrecognized allele:', allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  650)         return None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  651) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  652) def get_mhc_class_2_alseq(chain, allele):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  653)     if allele in mhc_class_2_alfas[chain]:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  654)         return mhc_class_2_alfas[chain][allele]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  655)     assert '*' in allele # human
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  656)     sortl = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  657)     for k in mhc_class_2_alfas[chain]:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  658)         if k.startswith(allele) and k[len(allele)] == ':':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  659)             suffix = [int(x) if x.isdigit() else 100
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  660)                       for x in k[len(allele)+1:].split(':')]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  661)             sortl.append((suffix, k))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  662)     if sortl:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  663)         sortl.sort()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  664)         best_allele = sortl[0][1]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  665)         #print('close allele:', allele, best_allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  666)         return mhc_class_2_alfas[chain][best_allele]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  667)     elif allele.count(':')>1:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  668)         trim_allele = ':'.join(allele.split(':')[:2])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  669)         return get_mhc_class_2_alseq(chain, trim_allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  670)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  671)         return None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  672) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  673) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  674) def get_mhc_class_2_mhc_alignseq_from_chainseq(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  675)         mhc_allele,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  676)         mhca_pdbseq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  677)         mhcb_pdbseq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  678)         info='',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  679) ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  680)     GAP = ALL_GENES_GAP_CHAR # shorter to type
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  681)     mhcs = mhc_allele.split(',')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  682)     assert len(mhcs) == 2
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  683)     # mhcs = ['H2'+x if (len(x)==3 and '*' not in x) else x
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  684)     #         for x in mhcs]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  685)     # if mhcs[0] == 'DPA1*01:04':# hack-- DPA1*01:04 has XXXXX in sequence
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  686)     #     mhcs[0] = 'DPA1*01:12' # blast says this is good, one L-S mismatch
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  687)     pdbseqs = [mhca_pdbseq, mhcb_pdbseq]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  688) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  689)     aligns = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  690)     for ab, mhc, pdbseq in zip('AB', mhcs, pdbseqs):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  691)         alseq = get_mhc_class_2_alseq(ab, mhc)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  692)         #print(ab, mhc, alseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  693)         if alseq is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  694)             print('ERROR get_mhc_class_2_alseq alseq is None:', ab, mhc, info)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  695)             return None ## NOTE EARLY RETURN
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  696) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  697)         allele_seq = alseq.replace(GAP,'')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  698)         al1 = blosum_align(pdbseq, allele_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  699)         al2 = {i-alseq[:i].count(GAP):i
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  700)                for i,a in enumerate(alseq) if a != GAP}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  701)         align = [GAP]*len(alseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  702)         for i,a in enumerate(pdbseq):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  703)             if i in al1:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  704)                 alpos = al2[al1[i]]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  705)                 align[alpos] = a
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  706)                 if allele_seq[al1[i]] != a:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  707)                     print('mismatch:', mhc, i, 'pdb:', a, 'allele:',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  708)                           allele_seq[al1[i]], info)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  709)         aligns.append(''.join(align))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  710)         assert aligns[-1].replace(GAP,'') in pdbseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  711) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  712)     return '/'.join(aligns)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  713)     # outl = l.copy()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  714)     # outl['mhc_allele'] = ','.join(mhcs)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  715)     # outl['mhc_alignseq'] = '/'.join(aligns)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  716) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  717) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  718) def get_mhc_class_1_mhc_alignseq_from_chainseq(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  719)         mhc_allele,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  720)         mhc_pdbseq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  721)         info='',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  722) ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  723)     GAP = ALL_GENES_GAP_CHAR # shorter to type
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  724) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  725)     mhc_alseq = get_mhc_class_1_alseq(mhc_allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  726)     if mhc_alseq is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  727)         print('ERROR get_mhc_class_1_mhc_alignseq_from_chainseq:',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  728)               'mhc_alseq None:', mhc_allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  729)         return None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  730)     mhc_seq = mhc_alseq.replace(GAP, '')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  731) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  732)     seq = mhc_pdbseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  733) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  734)     al1 = blosum_align(seq, mhc_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  735) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  736)     al2 = {i-mhc_alseq[:i].count(GAP) : i
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  737)            for i,a in enumerate(mhc_alseq) if a != GAP}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  738) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  739)     align = [GAP]*len(mhc_alseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  740)     for i,a in enumerate(seq):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  741)         if i in al1:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  742)             alpos = al2[al1[i]]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  743)             align[alpos] = a
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  744)             if mhc_alseq[alpos] != a:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  745)                 print(f'mismatch: {alpos:3d} {mhc_alseq[alpos]}-->{a}',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  746)                       mhc_allele, info)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  747)     part = ''.join(align).replace(GAP,'')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  748)     assert part in seq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  749)     return ''.join(align)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  750) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  751) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  752) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  753) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  754) def get_template_pose_and_tdinfo(pdbid, complex_type, extra_info=None):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  755)     ''' returns pose, tdinfo
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  756)     complex_type should be in {TCR, TERNARY, PMHC}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  757)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  758)     info, poses = all_template_info[complex_type], all_template_poses[complex_type]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  759)     if pdbid not in poses:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  760)         pdbfile = set(info[info.pdbid==pdbid].pdbfile)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  761)         if not pdbfile:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  762)             # right now we only have class 1 in the special pmhc info...
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  763)             if extra_info is not None and pdbid in extra_info.index:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  764)                 info = extra_info
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  765)             elif complex_type == PMHC and pdbid in ternary_info.index:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  766)                 info = all_template_info[TERNARY] # NOTE NOTE NOTE
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  767)             elif complex_type == PMHC and pdbid in new_pmhc_info.index:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  768)                 info = new_pmhc_info
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  769)             elif complex_type in [PMHC, TERNARY] and pdbid in new_ternary_info.index:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  770)                 print('WARNING: using pdb from new_ternary_info:', pdbid)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  771)                 info = new_ternary_info
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  772)             elif pdbid in new_tcr_info.pdbid:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  773)                 print('WARNING: using pdb from new_tcr_info:', pdbid)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  774)                 assert complex_type == TCR
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  775)                 info = new_tcr_info
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  776)             else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  777)                 print('ERROR unrecognized pdbid not found in any info', pdbid,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  778)                       complex_type)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  779)                 assert False
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  780)                 exit(1)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  781)             pdbfile = set(info[info.pdbid==pdbid].pdbfile)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  782)         assert len(pdbfile) == 1
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  783)         pdbfile = pdbfile.pop() # TCRpepMHC version
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  784)         if pdbfile[0] != '/':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  785)             pdbfile = str(path_to_db) + '/' + pdbfile # TCRdock version
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  786)         #print('read:', pdbfile)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  787)         pose = pdblite.pose_from_pdb(pdbfile)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  788)         tdifile = pdbfile+'.tcrdock_info.json'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  789)         tdinfo = TCRdockInfo().from_string(open(tdifile,'r').read())
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  790)         #print('make tdinfo 0-indexed:', tdifile)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  791)         #tdinfo.renumber({i+1:i for i in range(len(pose['sequence']))})
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  792)         poses[pdbid] = (pose, tdinfo)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  793)     pose, tdinfo = poses[pdbid]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  794)     return copy.deepcopy(pose), TCRdockInfo().from_dict(tdinfo.to_dict())# return copies
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  795) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  796) def count_peptide_mismatches(a,b):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  797)     if len(a)>len(b):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  798)         return count_peptide_mismatches(b,a)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  799)     lendiff = len(b)-len(a)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  800)     assert lendiff>=0
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  801)     min_mismatches = len(a)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  802)     for shift in range(lendiff+1):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  803)         mismatches = sum(x!=y for x,y in zip(a,b[shift:]))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  804)         if mismatches < min_mismatches:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  805)             min_mismatches = mismatches
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  806)     # also allow bulging out in the middle
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  807)     nt = len(a)//2
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  808)     ct = len(a) - nt
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  809)     btrim = b[:nt]+b[-ct:]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  810)     assert len(btrim) == len(a)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  811)     mismatches = sum(x!=y for x,y in zip(a,btrim))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  812)     if mismatches < min_mismatches:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  813)         min_mismatches = mismatches
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  814)     return min_mismatches
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  815) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  816) pep1 = 'DSIODJSJD' # sanity checking...
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  817) pep2 = 'DSIXDJSJD'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  818) assert count_peptide_mismatches(pep1,pep1)==0
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  819) assert count_peptide_mismatches(pep1,pep1[:-1])==0
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  820) assert count_peptide_mismatches(pep1,pep2)==1
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  821) 
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  822) 
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  823) def add_resolution_and_mismatches_info_to_tcrs_df(tcrs):
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  824) 
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  825)     assert 'pdbid' in tcrs.columns
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  826)     # need to add resolution
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  827)     pdbid2resolution = {}
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  828)     pdbid2mismatches = {}
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  829)     for organism in 'human mouse'.split():
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  830)         # temporary hack...
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  831)         logfile = path_to_db / f'tmp.pdb_tcr_{organism}.2024-12-01.log'
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  832)         #logfile = path_to_db / f'tmp.pdb_tcr_{organism}.2023-06-02.log'
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  833)         # logfile = path_to_db / f'tmp.pdb_tcr_{organism}.2021-08-05.log'
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  834)         assert exists(logfile)
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  835)         for line in os.popen(f'grep ^both {logfile}'):
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  836)             l = line.split()
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  837)             pdbid = l[1]
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  838)             resolution = float(l[-2])
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  839)             v_mismatches = int(l[3]) + int(l[7])
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  840)             pdbid2resolution[pdbid] = resolution
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  841)             pdbid2mismatches[pdbid] = min(v_mismatches, pdbid2mismatches.get(
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  842)                 pdbid,100))
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  843) 
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  844)     pdbid2resolution['8dnt'] = 3.18 # parse failed, prob cuz cif-->pdb
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  845)     pdbid2resolution['8qfy'] = 2.33 # parse failed
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  846)     tcrs['resolution'] = tcrs.pdbid.map(pdbid2resolution)
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  847)     tcrs['mismatches'] = tcrs.pdbid.map(pdbid2mismatches)
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  848)     assert tcrs.resolution.isna().sum()==0
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  849)     return tcrs
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  850) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  851) def get_clean_and_nonredundant_ternary_tcrs_df(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  852)         min_peptide_mismatches = 3,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  853)         min_tcrdist = 120.5,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  854)         peptide_tcrdist_logical = 'or', # 'or' or 'and' -- 'or' is nr by either feature
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  855)         drop_HLA_E = True,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  856)         verbose=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  857)         skip_redundancy_check=False, # just add resol,mismatches and sort
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  858)         filter_BAD_DGEOM_PDBIDS=True,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  859)         filter_BAD_PMHC_PDBIDS=True,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  860)         tcrs=None,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  861) ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  862)     ''' peptide_tcrdist_logical = 'or' is more stringent redundancy filtering
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  863)     ie, smaller df returned. A TCR:pMHC is considered redundant by peptide OR
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  864)     by TCRdist.
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  865)     'and' means redundant only if both peptide and TCRdist redundant
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  866)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  867)     assert peptide_tcrdist_logical in ['or','and']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  868) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  869)     if tcrs is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  870)         tcrs = ternary_info.copy()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  871)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  872)         tcrs = tcrs.copy()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  873) 
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  874)     if 'mhc_allele' not in tcrs.columns:
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  875)         tcrs['mhc_allele'] = tcrs.mhc
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  876)     if 'pep_seq' not in tcrs.columns:
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  877)         tcrs['pep_seq'] = tcrs.peptide
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  878)     bad_pdbids = set()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  879)     if filter_BAD_DGEOM_PDBIDS:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  880)         bad_pdbids.update(set(BAD_DGEOM_PDBIDS))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  881)     if filter_BAD_PMHC_PDBIDS:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  882)         bad_pdbids.update(set(BAD_PMHC_PDBIDS))
e3a4325f (phbradley 2023-10-23 11:10:33 -0700  883)     if verbose:
e3a4325f (phbradley 2023-10-23 11:10:33 -0700  884)         print('get_clean_and_nonredundant_ternary_tcrs_df: bad_pdbids', bad_pdbids)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  885) 
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  886)     if 'pdbid' in tcrs.columns:
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  887)         tcrs = tcrs[~tcrs.pdbid.isin(bad_pdbids)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  888) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  889)     if drop_HLA_E: # drop HLA-E
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  890)         tcrs = tcrs[~tcrs.mhc_allele.str.startswith('E*')]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  891) 
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  892)     if 'resolution' not in tcrs.columns or 'mismatches' not in tcrs.columns:
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  893)         assert 'pdbid' in tcrs.columns
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  894)         # need to add resolution
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  895)         pdbid2resolution = {}
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  896)         pdbid2mismatches = {}
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  897)         for organism in 'human mouse'.split():
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  898)             # temporary hack...
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  899)             logfile = path_to_db / f'tmp.pdb_tcr_{organism}.2023-06-02.log'
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  900)             # logfile = path_to_db / f'tmp.pdb_tcr_{organism}.2021-08-05.log'
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  901)             assert exists(logfile)
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  902)             for line in os.popen(f'grep ^both {logfile}'):
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  903)                 l = line.split()
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  904)                 pdbid = l[1]
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  905)                 resolution = float(l[-2])
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  906)                 v_mismatches = int(l[3]) + int(l[7])
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  907)                 pdbid2resolution[pdbid] = resolution
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  908)                 pdbid2mismatches[pdbid] = min(v_mismatches, pdbid2mismatches.get(
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  909)                     pdbid,100))
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  910) 
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  911)         tcrs['resolution'] = tcrs.pdbid.map(pdbid2resolution)
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  912)         tcrs['mismatches'] = tcrs.pdbid.map(pdbid2mismatches)
50f68e05 (phbradley 2025-05-06 17:01:13 -0700  913)         assert tcrs.resolution.isna().sum()==0
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  914) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  915)     ## remove redundancy
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  916)     # sort by count for peptide, then resolution
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  917) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  918)     tcrs['org_pep'] = (tcrs.mhc_class.astype(str) + "_" +
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  919)                        tcrs.organism + "_" + tcrs.pep_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  920)     tcrs['org_pep_count'] = tcrs.org_pep.map(tcrs.org_pep.value_counts())
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  921) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  922)     tcrs['neg_quality'] = -10*tcrs.org_pep_count + tcrs.resolution + 0.5*tcrs.mismatches
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  923) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  924)     tcrs.sort_values('neg_quality', inplace=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  925) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  926)     if not skip_redundancy_check:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  927)         tdist = {'human': tcrdist.tcr_distances.TcrDistCalculator('human'),
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  928)                  'mouse': tcrdist.tcr_distances.TcrDistCalculator('mouse')}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  929) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  930)         tcr_tuples = [((l.va, l.ja, l.cdr3a), (l.vb, l.jb, l.cdr3b))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  931)                       for l in tcrs.itertuples()]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  932) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  933)         is_redundant = [False]*tcrs.shape[0]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  934) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  935)         for i, irow in enumerate(tcrs.itertuples()):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  936)             # check to see if i is too close to any previous tcr
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  937)             for j in range(i):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  938)                 jrow = tcrs.iloc[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  939)                 if is_redundant[j]:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  940)                     continue
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  941) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  942)                 pep_mms = count_peptide_mismatches(irow.pep_seq, jrow.pep_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  943)                 if (irow.organism == jrow.organism and
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  944)                     irow.mhc_class == jrow.mhc_class):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  945)                     tcrd = tdist[irow.organism](tcr_tuples[i], tcr_tuples[j])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  946)                     pep_red = (pep_mms < min_peptide_mismatches)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  947)                     tcr_red = (tcrd < min_tcrdist)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  948)                     if ((peptide_tcrdist_logical=='or' and
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  949)                          (pep_red or tcr_red)) or
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  950)                         (peptide_tcrdist_logical=='and' and
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  951)                          (pep_red and tcr_red))):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  952) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  953)                         # redundant
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  954)                         is_redundant[i] = True
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  955)                         if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  956)                             print('skip:', i, irow.org_pep, irow.neg_quality,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  957)                                   tcr_tuples[i])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  958)                         break
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  959) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  960)         tcrs['is_redundant'] = is_redundant
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  961) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  962)         tcrs = tcrs[~tcrs.is_redundant].copy()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  963)     return tcrs
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  964) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  965) def filter_templates_by_tcrdist(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  966)         templates, # dataframe
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  967)         organism, va, cdr3a, vb, cdr3b,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  968)         min_paired_tcrdist=-1,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  969)         min_singlechain_tcrdist=-1,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  970)         verbose=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  971) ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  972)     ''' returns new templates
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  973) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  974)     will have paired_tcrdist and singlechain_tcrdist cols
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  975)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  976)     tcrdister = get_tcrdister('human_and_mouse')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  977) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  978)     template_tcrs = [
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  979)         ((l.organism[0]+l.va, None, l.cdr3a), (l.organism[0]+l.vb, None, l.cdr3b))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  980)         for l in templates.itertuples()]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  981) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  982)     target_tcr = ((organism[0]+va, None, cdr3a), (organism[0]+vb, None, cdr3b))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  983) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  984)     templates['paired_tcrdist'] = np.array(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  985)         [tcrdister(target_tcr,x) for x in template_tcrs])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  986) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  987)     for iab, ab in enumerate('AB'):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  988)         templates[ab+'_tcrdist'] = np.array(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  989)             [tcrdister.single_chain_distance(target_tcr[iab], x[iab])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  990)              for x in template_tcrs])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  991) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  992)     templates['AB_tcrdist'] = templates.paired_tcrdist
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  993) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  994)     templates['singlechain_tcrdist'] = np.minimum(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  995)         templates.A_tcrdist, templates.B_tcrdist)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  996) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  997)     too_close_mask = ((templates.organism==organism)&
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  998)                       ((templates.paired_tcrdist < min_paired_tcrdist)|
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700  999)                        (templates.singlechain_tcrdist < min_singlechain_tcrdist)))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1000)     if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1001)         print('too close by tcrdist:', np.sum(too_close_mask), organism,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1002)               va, cdr3a, vb, cdr3b)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1003) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1004)     return templates[~too_close_mask].copy()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1005) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1006) def filter_templates_by_peptide_mismatches(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1007)         templates,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1008)         organism,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1009)         mhc_class,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1010)         peptides_for_filtering,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1011)         min_peptide_mismatches,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1012)         verbose = False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1013) ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1014)     if not peptides_for_filtering:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1015)         return templates.copy()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1016) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1017)     templates['filt_peptide_mismatches'] = np.array(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1018)         [min(count_peptide_mismatches(p, l.pep_seq) for p in peptides_for_filtering)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1019)              for l in templates.itertuples()])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1020)     too_close_mask = ((templates.organism==organism) &
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1021)                       (templates.mhc_class==mhc_class) &
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1022)                       (templates.filt_peptide_mismatches<min_peptide_mismatches))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1023)     if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1024)         print('too close by peptide mismatches:', np.sum(too_close_mask), organism,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1025)               peptides_for_filtering)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1026) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1027)     return templates[~too_close_mask].copy()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1028) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1029) def pick_dgeom_templates(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1030)         num_templates, # per chain setting
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1031)         organism,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1032)         mhc_class,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1033)         mhc_allele,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1034)         peptide,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1035)         va,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1036)         cdr3a,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1037)         vb,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1038)         cdr3b,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1039)         min_peptide_mismatches=3, # ie, 3 or more is OK
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1040)         min_paired_tcrdist=96.5, # 96 or less is BAD
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1041)         min_singlechain_tcrdist=35.9, # ie 36 or more is OK
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1042)         min_template_template_paired_tcrdist = 35.9, # for redundancy filtering
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1043)         peptides_for_filtering = None,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1044)         drop_HLA_E = True,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1045)         exclude_pdbids = None,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1046) ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1047)     ''' returns dict
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1048)     {
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1049)       'A' : alpha_templates_df,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1050)       'B' : beta_templates_df,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1051)       'AB': paired_templates_df,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1052)     }
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1053) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1054)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1055)     if peptides_for_filtering is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1056)         peptides_for_filtering = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1057)     elif peptides_for_filtering:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1058)         assert peptide in peptides_for_filtering # sanity? seems like should be true
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1059) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1060)     if exclude_pdbids is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1061)         exclude_pdbids = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1062)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1063)         exclude_pdbids = frozenset(exclude_pdbids)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1064) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1065)     print('pick_dgeom_templates:', min_peptide_mismatches, min_paired_tcrdist,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1066)           min_singlechain_tcrdist, min_template_template_paired_tcrdist,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1067)           peptides_for_filtering)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1068) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1069)     tcrdister = get_tcrdister('human_and_mouse')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1070) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1071)     # sorts by pep-count, resolution, mismatches
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1072)     # excludes BAD_DGEOM_PDBIDS but not BAD_PMHC_PDBIDS
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1073)     templates = get_clean_and_nonredundant_ternary_tcrs_df(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1074)         skip_redundancy_check=True, filter_BAD_PMHC_PDBIDS=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1075)         drop_HLA_E=drop_HLA_E)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1076) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1077)     templates = templates[templates.mhc_class == mhc_class]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1078)     templates = templates[~templates.pdbid.isin(exclude_pdbids)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1079) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1080)     templates = filter_templates_by_peptide_mismatches(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1081)         templates, organism, mhc_class, peptides_for_filtering,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1082)         min_peptide_mismatches)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1083) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1084)     templates = filter_templates_by_tcrdist(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1085)         templates, organism, va, cdr3a, vb, cdr3b,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1086)         min_paired_tcrdist=min_paired_tcrdist,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1087)         min_singlechain_tcrdist=min_singlechain_tcrdist,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1088)     )
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1089) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1090)     # currently unused...
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1091)     templates['peptide_mismatches'] = np.array(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1092)         [count_peptide_mismatches(peptide, l.pep_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1093)          for l in templates.itertuples()])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1094) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1095)     def calc_chain_tcrdist(row1, row2, chain, tcrdister=tcrdister):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1096)         tcr1 = ((row1.organism[0]+row1.va, None, row1.cdr3a),
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1097)                 (row1.organism[0]+row1.vb, None, row1.cdr3b))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1098)         tcr2 = ((row2.organism[0]+row2.va, None, row2.cdr3a),
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1099)                 (row2.organism[0]+row2.vb, None, row2.cdr3b))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1100)         if chain == 'AB':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1101)             return tcrdister(tcr1, tcr2)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1102)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1103)             assert chain in ['A','B']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1104)             ich = 'AB'.index(chain)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1105)             return tcrdister.single_chain_distance(tcr1[ich], tcr2[ich])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1106) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1107) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1108)     all_templates = {}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1109)     for chain in ['A','B','AB']:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1110)         # sort by
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1111)         templates.sort_values(chain+'_tcrdist', inplace=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1112) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1113)         dfl = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1114)         for _, row1 in templates.iterrows():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1115)             # check for redundancy
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1116)             redundant = False
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1117)             for row2 in dfl:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1118)                 if (calc_chain_tcrdist(row1, row2, 'AB') <
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1119)                     min_template_template_paired_tcrdist):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1120)                     redundant = True
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1121)                     print('redundant template:', chain, row1.pdbid, row2.pdbid)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1122)                     break
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1123)             if redundant:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1124)                 continue
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1125)             dfl.append(row1.copy())
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1126)             print('new_dgeom_template:', chain, len(dfl), row1[chain+'_tcrdist'],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1127)                   row1.organism, row1.mhc_class, row1.mhc_allele, row1.pep_seq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1128)                   row1.va, row1.cdr3a, row1.vb, row1.cdr3b)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1129)             if len(dfl)>=num_templates:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1130)                 break
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1131)         all_templates[chain] = pd.DataFrame(dfl)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1132) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1133)     return all_templates
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1134) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1135) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1136) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1137) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1138) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1139) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1140) def make_templates_for_alphafold_same_pmhc(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1141)         organism,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1142)         va,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1143)         ja,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1144)         cdr3a,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1145)         vb,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1146)         jb,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1147)         cdr3b,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1148)         mhc_class,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1149)         mhc_allele,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1150)         peptide,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1151)         outfile_prefix,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1152)         num_runs=3,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1153)         num_templates_per_run=4,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1154)         min_single_chain_tcrdist=-1,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1155)         next_best_identity_threshold_mhc=0.98,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1156)         next_best_identity_threshold_tcr=0.98,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1157)         verbose=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1158) ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1159)     ''' Only use ternary templates: no franken templates
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1160) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1161)     Exclude potential templates based on
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1162) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1163)     - overall seqid
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1164) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1165)     OR
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1166) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1167)     - paired tcrdist
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1168) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1169)     right now, just a single run
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1170) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1171)     Make num_runs alignfiles <outfile_prefix>_<run>_alignments.tsv
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1172) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1173)     returns df with lines for "targets.tsv" file, last 2 columns are
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1174)     <alignfile> and <target_chainseq>
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1175) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1176)     returns None for failure
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1177) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1178)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1179)     # check arguments
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1180)     if mhc_class == 2:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1181)         assert len(peptide) == CLASS2_PEPLEN
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1182)         assert mhc_allele.count(',') == 1
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1183) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1184)     tcrdister = get_tcrdister('human_and_mouse')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1185) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1186)     core_len = TCR_CORE_LEN
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1187) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1188)     template_mask = ((ternary_info.organism == organism) &
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1189)                      (ternary_info.mhc_class == mhc_class) &
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1190)                      (ternary_info.mhc_allele == mhc_allele) &
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1191)                      (ternary_info.pep_seq == peptide) &
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1192)                      (~ternary_info.pdbid.isin(BAD_PMHC_PDBIDS))&
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1193)                      (~ternary_info.pdbid.isin(BAD_DGEOM_PDBIDS)))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1194)     if not template_mask.sum():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1195)         print('ERROR no matching templates:: make_templates_for_alphafold_same_pmhc',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1196)               organism, mhc_class, mhc_allele, peptide)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1197)     templates = ternary_info[template_mask]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1198)     print('make_templates_for_alphafold_same_pmhc num_templates=', templates.shape[0])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1199) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1200) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1201)     # get MHC align-seqs
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1202)     if mhc_class == 1:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1203)         trg_mhc_alseqs = [get_mhc_class_1_alseq(mhc_allele)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1204)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1205)         trg_mhc_alseqs = [get_mhc_class_2_alseq('A', mhc_allele.split(',')[0]),
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1206)                           get_mhc_class_2_alseq('B', mhc_allele.split(',')[1])]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1207) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1208) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1209)     return None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1210) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1211) def align_vgene_to_structure_msas(organism, v_gene):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1212)     msa_alignments = {}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1213) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1214)     vseq = get_v_seq_up_to_cys(organism, v_gene)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1215)     for msa_type in ['both','human']:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1216)         if msa_type == 'human':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1217)             if organism != 'human':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1218)                 continue
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1219)             row = human_structure_alignments.loc[v_gene]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1220)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1221)             row = both_structure_alignments.loc[(organism, v_gene)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1222)         assert row.alseq.replace(ALL_GENES_GAP_CHAR,'') == vseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1223)         vseq_to_alseq = {k-row.alseq[:k].count(ALL_GENES_GAP_CHAR) : k
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1224)                          for k,a in enumerate(row.alseq) if a!=ALL_GENES_GAP_CHAR}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1225)         msa_alignments[msa_type] = vseq_to_alseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1226)     return msa_alignments
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1227) 
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1228) 
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1229) def trim_and_validate_class1_mhc(organism, mhc):
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1230)     'silly helper function to standardize handling'
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1231)     if organism == 'human':
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1232)         # now adding HLA-E 2022-05-03
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1233)         assert mhc[0] in 'ABCE' and mhc[1]=='*' and ':' in mhc
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1234)         mhc = ':'.join(mhc.split(':')[:2]) # just the 4 digits
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1235)     else:
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1236)         assert mhc.startswith('H2') and mhc in mhc_class_1_alfas
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1237)     return mhc
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1238)     
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1239) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1240) def make_pmhc_chainseq_for_alphafold(
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1241)         organism,
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1242)         mhc_class,
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1243)         mhc,
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1244)         peptide,
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1245) ):
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1246)     '''
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1247)     '''
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1248) 
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1249)     if mhc_class == 2:
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1250)         assert len(peptide) == CLASS2_PEPLEN
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1251)         assert mhc.count(',') == 1
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1252) 
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1253)     if mhc_class == 1:
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1254)         mhc = trim_and_validate_class1_mhc(organism, mhc)
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1255)         
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1256)         # first: MHC part
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1257)         trg_mhc_alseq = get_mhc_class_1_alseq(mhc)
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1258)         trg_mhc_seq = trg_mhc_alseq.replace(ALL_GENES_GAP_CHAR,'')
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1259)         cs = [trg_mhc_seq, peptide]
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1260)     else: # class II
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1261)         trg_mhca_alseq = get_mhc_class_2_alseq('A', mhc.split(',')[0])
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1262)         trg_mhcb_alseq = get_mhc_class_2_alseq('B', mhc.split(',')[1])
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1263)         trg_mhca_seq = trg_mhca_alseq.replace(ALL_GENES_GAP_CHAR,'')
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1264)         trg_mhcb_seq = trg_mhcb_alseq.replace(ALL_GENES_GAP_CHAR,'')
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1265)         cs = [trg_mhca_seq, trg_mhcb_seq, peptide]
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1266) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1267) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1268)     return '/'.join(cs)
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1269) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1270) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1271) def make_pmhc_tcr_chainseq_for_alphafold(
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1272)         organism,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1273)         mhc_class,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1274)         mhc,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1275)         peptide,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1276)         va,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1277)         ja,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1278)         cdr3a,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1279)         vb,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1280)         jb,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1281)         cdr3b,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1282)         va_mutations = [],
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1283)         vb_mutations = [],
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1284) ):
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1285)     ''' pass None for va to get just the pmhc chainseq
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1286)     '''
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1287)     if type(va_mutations) is str:
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1288)         va_mutations = va_mutations.split(',')
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1289)     if type(vb_mutations) is str:
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1290)         vb_mutations = vb_mutations.split(',')
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1291)     if type(va_mutations) is not list and pd.isna(va_mutations):
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1292)         va_mutations = []
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1293)     if type(vb_mutations) is not list and pd.isna(vb_mutations):
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1294)         vb_mutations = []
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1295) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1296) 
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1297)     if mhc is None or pd.isna(mhc):
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1298)         cs = []
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1299)     else:
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1300)         pmhc_chainseq = make_pmhc_chainseq_for_alphafold(
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1301)             organism, mhc_class, mhc, peptide)
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1302)         cs = pmhc_chainseq.split('/')
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1303) 
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1304)     if va is not None and not pd.isna(va):
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1305)         for v, j, cdr3, v_mutations in zip(
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1306)                 [va,vb], [ja,jb], [cdr3a,cdr3b], [va_mutations,vb_mutations]):
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1307)             vseq = get_v_seq_up_to_cys(organism, v)
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1308)             jseq = get_j_seq_after_cdr3(organism, j)
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1309) 
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1310)             if v_mutations:
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1311)                 for mut in v_mutations:
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1312)                     if not mut:
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1313)                         continue # might happen if there are no mutations at all
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1314)                     print('make v-gene mutation:', v, mut)
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1315)                     oldaa, newaa = mut[0], mut[-1]
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1316)                     pos = int(mut[1:-1])
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1317)                     assert vseq[pos] == oldaa
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1318)                     assert newaa in amino_acids
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1319)                     vseq = vseq[:pos] + newaa + vseq[pos+1:]
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1320) 
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1321)             tcr_chainseq = vseq[:-1] + cdr3 + jseq
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1322)             cs.append(tcr_chainseq)
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1323) 
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1324)     return '/'.join(cs)
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1325) 
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1326) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1327) _abid_info = None
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1328) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1329) def make_pmhc_ig_chainseq_for_alphafold(
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1330)         organism,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1331)         mhc_class,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1332)         mhc,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1333)         peptide,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1334)         abid,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1335)         cdr3a,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1336)         cdr3b,
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1337)         va_mutations = [],
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1338)         vb_mutations = [],
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1339) ):
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1340)     '''
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1341)     '''
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1342)     global _abid_info
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1343)     if _abid_info is None:
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1344)         _abid_info = pd.read_table(path_to_db/'sabdab_summary_2024-01-26_abid_info.tsv')
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1345)         _abid_info.set_index('abid', drop=False, inplace=True)
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1346) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1347)     if type(va_mutations) is str:
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1348)         va_mutations = va_mutations.split(',')
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1349)     if type(vb_mutations) is str:
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1350)         vb_mutations = vb_mutations.split(',')
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1351)     if type(va_mutations) is not list and pd.isna(va_mutations):
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1352)         va_mutations = []
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1353)     if type(vb_mutations) is not list and pd.isna(vb_mutations):
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1354)         vb_mutations = []
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1355) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1356)     abid_row = _abid_info.loc[abid]
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1357) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1358)     pmhc_organism = organism[:-3] if organism.endswith('_ig') else organism
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1359) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1360)     pmhc_chainseq = make_pmhc_chainseq_for_alphafold(
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1361)         pmhc_organism, mhc_class, mhc, peptide)
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1362)     cs = pmhc_chainseq.split('/')
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1363) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1364)     for tmp_seq, tmp_cdr3, cdr3, v_mutations in zip(
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1365)             [abid_row.chainseq_a,abid_row.chainseq_b], [abid_row.cdr3a,abid_row.cdr3b],
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1366)             [cdr3a,cdr3b], [va_mutations,vb_mutations]):
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1367)         start = tmp_seq.index(tmp_cdr3)
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1368)         before_seq = tmp_seq[:start]
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1369)         after_seq = tmp_seq[start+len(tmp_cdr3):]
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1370)         assert tmp_seq == before_seq + tmp_cdr3 + after_seq
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1371) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1372)         if v_mutations:
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1373)             for mut in v_mutations:
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1374)                 if not mut:
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1375)                     continue # might happen if there are no mutations at all
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1376)                 print('make v-gene mutation:', abid, mut)
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1377)                 oldaa, newaa = mut[0], mut[-1]
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1378)                 pos = int(mut[1:-1])
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1379)                 assert tmp_seq[pos] == oldaa
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1380)                 assert newaa in amino_acids
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1381)                 before_seq = before_seq[:pos] + newaa + before_seq[pos+1:]
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1382) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1383)         ig_chainseq = before_seq + cdr3 + jseq
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1384)         cs.append(ig_chainseq)
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1385) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1386)     return '/'.join(cs)
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1387) 
9a43b0bc (phbradley 2025-07-01 16:24:30 -0700 1388) 
f238ffcc (phbradley 2025-06-30 15:46:09 -0700 1389) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1390) def make_templates_for_alphafold(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1391)         organism,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1392)         va,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1393)         ja,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1394)         cdr3a,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1395)         vb,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1396)         jb,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1397)         cdr3b,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1398)         mhc_class,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1399)         mhc_allele,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1400)         peptide,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1401)         outfile_prefix,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1402)         num_runs=5, # match default in setup_for_alphafold
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1403)         num_templates_per_run=4,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1404)         exclude_self_peptide_docking_geometries=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1405)         exclude_docking_geometry_peptides=None, # None or list of peptides
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1406)         # below is only applied if exclude_docking_geometry_peptides is nonempty
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1407)         #   or exclude_self_peptide_docking_geometries
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1408)         min_dgeom_peptide_mismatches=3, # not used if exclude_* are False/None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1409)         min_dgeom_paired_tcrdist=-1,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1410)         min_dgeom_singlechain_tcrdist=-1,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1411)         min_single_chain_tcrdist=-1,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1412)         min_pmhc_peptide_mismatches=-1,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1413)         next_best_identity_threshold_mhc=0.98,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1414)         next_best_identity_threshold_tcr=0.98,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1415)         ternary_bonus=0.05, # for tcr templates, in frac identities
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1416)         alt_self_peptides=None, # or list of peptides
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1417)         verbose=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1418)         pick_dgeoms_using_tcrdist=False, # implies num_runs=3
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1419)         use_same_pmhc_dgeoms=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1420)         exclude_pdbids=None,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1421)         force_pmhc_pdbids=None,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1422)         force_tcr_pdbids=None,
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1423)         force_tcr_pdbids_dgeoms=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1424)         use_opt_dgeoms=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1425)         use_new_templates=False, # from the 2023-06-02 update
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1426)         extra_pmhc_templates=None,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1427) ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1428)     ''' Makes num_templates_per_run * num_runs template pdb files
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1429) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1430)     Make num_runs alignfiles <outfile_prefix>_<run>_alignments.tsv
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1431) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1432)     returns df with lines for "targets.tsv" file, last 2 columns are
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1433)     <alignfile> and <target_chainseq>
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1434) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1435)     returns None for failure
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1436) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1437)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1438)     from .pdblite import (apply_transform_Rx_plus_v, delete_chains, append_chains,
768e4fa9 (phbradley 2024-01-02 09:57:13 -0800 1439)                           dump_pdb, set_chainbounds_and_renumber)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1440) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1441)     if exclude_pdbids is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1442)         exclude_pdbids = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1443)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1444)         exclude_pdbids = frozenset(exclude_pdbids)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1445)         print(f'will exclude {len(exclude_pdbids)} pdbids')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1446) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1447)     # check arguments
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1448)     if mhc_class == 2:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1449)         assert len(peptide) == CLASS2_PEPLEN
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1450)         assert mhc_allele.count(',') == 1
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1451) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1452)     if pick_dgeoms_using_tcrdist:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1453)         assert num_runs == 3 # AB, A, B
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1454) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1455)     if use_opt_dgeoms:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1456)         assert num_runs == 1
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1457) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1458)     if exclude_docking_geometry_peptides is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1459)         exclude_docking_geometry_peptides = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1460)     if alt_self_peptides is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1461)         alt_self_peptides = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1462) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1463)     if exclude_self_peptide_docking_geometries:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1464)         # dont modify the passed-in list
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1465)         exclude_docking_geometry_peptides = (
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1466)             exclude_docking_geometry_peptides+[peptide]+alt_self_peptides)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1467) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1468)     tcrdister = get_tcrdister('human_and_mouse')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1469) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1470)     if use_new_templates:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1471)         my_ternary_info = pd.concat([ternary_info, new_ternary_info])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1472)         my_tcr_info = pd.concat([tcr_info, new_tcr_info])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1473)         badmask = new_ternary_info.pdbid.isin(set(pmhc_info.pdbid))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1474)         my_pmhc_info = pd.concat([pmhc_info, new_ternary_info[~badmask], new_pmhc_info])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1475)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1476)         my_ternary_info = ternary_info
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1477)         my_tcr_info = tcr_info
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1478)         my_pmhc_info = pmhc_info
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1479) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1480)     if extra_pmhc_templates is not None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1481)         ind0 = extra_pmhc_templates.index[0]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1482)         assert len(ind0) == 4 # pdbids? maybe fake ones...
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1483)         my_pmhc_info = pd.concat([my_pmhc_info, extra_pmhc_templates])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1484) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1485)     def show_alignment(al,seq1,seq2):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1486)         if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1487)             for i,j in sorted(al.items()):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1488)                 a,b = seq1[i], seq2[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1489)                 star = '*' if a==b else ' '
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1490)                 print(f'{i:4d} {j:4d} {a} {star} {b}')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1491)             idents = sum(seq1[i] == seq2[j] for i,j in al.items())/len(seq1)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1492)             print(f'idents: {idents:6.3f}')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1493) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1494)     core_len = TCR_CORE_LEN
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1495) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1496)     if mhc_class == 1:
a4729358 (phbradley 2025-07-03 15:31:26 -0700 1497)         mhc = trim_and_validate_class1_mhc(organism, mhc)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1498) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1499)         # first: MHC part
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1500)         trg_mhc_alseq = get_mhc_class_1_alseq(mhc_allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1501)         trg_mhc_seq = trg_mhc_alseq.replace(ALL_GENES_GAP_CHAR,'')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1502) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1503)         sortl = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1504) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1505)         # use new pmhc-only data
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1506)         # plus maybe some new ternary data
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1507)         for l in my_pmhc_info.itertuples():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1508)             if (l.organism!=organism or l.mhc_class!=mhc_class or
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1509)                 l.pdbid in BAD_PMHC_PDBIDS or l.pdbid in exclude_pdbids or
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1510)                 (force_pmhc_pdbids and l.pdbid not in force_pmhc_pdbids)):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1511)                 continue
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1512) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1513)             tmp_mhc_alseq = l.mhc_alignseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1514)             assert len(trg_mhc_alseq) == len(tmp_mhc_alseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1515) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1516)             mhc_idents = sum(a==b and a!=ALL_GENES_GAP_CHAR
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1517)                              for a,b in zip(trg_mhc_alseq, tmp_mhc_alseq))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1518) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1519)             if len(peptide) == len(l.pep_seq):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1520)                 pep_idents = sum(a==b for a,b in zip(peptide,l.pep_seq))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1521)             else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1522)                 pep_idents = sum(a==b for a,b in zip(peptide[:3]+peptide[-3:],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1523)                                                      l.pep_seq[:3]+l.pep_seq[-3:]))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1524)             mismatches_for_excluding = min(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1525)                 count_peptide_mismatches(x, l.pep_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1526)                 for x in [peptide]+alt_self_peptides)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1527)             if mismatches_for_excluding < min_pmhc_peptide_mismatches:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1528)                 if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1529)                     print('peptide too close:', peptide, l.pep_seq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1530)                           'mismatches_for_excluding:', mismatches_for_excluding,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1531)                           alt_self_peptides)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1532)                 continue
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1533)             assert len(peptide)-pep_idents >= min_pmhc_peptide_mismatches #sanity
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1534)             total = len(peptide)+len(trg_mhc_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1535)             frac = (mhc_idents+pep_idents)/total - 0.01*l.mhc_total_chainbreak
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1536)             sortl.append((frac, l.Index))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1537) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1538)         sortl.sort(reverse=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1539)         max_idents = sortl[0][0]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1540)         print(f'mhc max_idents: {max_idents:.3f}', mhc_allele, peptide,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1541)               my_pmhc_info.loc[sortl[0][1], 'mhc_allele'],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1542)               my_pmhc_info.loc[sortl[0][1], 'pep_seq'])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1543) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1544)         pmhc_alignments = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1545)         for (idents, pdbid) in sortl[:num_templates_per_run]:
768e4fa9 (phbradley 2024-01-02 09:57:13 -0800 1546)             if idents < next_best_identity_threshold_mhc*max_idents:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1547)                 break
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1548)             templatel = my_pmhc_info.loc[pdbid]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1549)             tmp_mhc_alseq = templatel.mhc_alignseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1550)             tmp_seql = templatel.chainseq.split('/')[:2] # slice to allow ternary pdbs
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1551)             assert len(tmp_seql)==2 and tmp_seql[1] == templatel.pep_seq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1552)             tmp_mhc_seq = tmp_seql[0] # class 1
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1553)             tmp_mhc_alseq_seq = tmp_mhc_alseq.replace(ALL_GENES_GAP_CHAR,'')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1554)             assert tmp_mhc_alseq_seq in tmp_mhc_seq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1555)             npad = tmp_mhc_seq.index(tmp_mhc_alseq_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1556)             #al1 = blosum_align(tmp_mhc_seq, tmp_mhc_alseq_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1557)             al1 = {i+npad:i for i in range(len(tmp_mhc_alseq_seq))}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1558) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1559)             al2 = {i-tmp_mhc_alseq[:i].count(ALL_GENES_GAP_CHAR):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1560)                    i-trg_mhc_alseq[:i].count(ALL_GENES_GAP_CHAR)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1561)                    for i,(a,b) in enumerate(zip(tmp_mhc_alseq, trg_mhc_alseq))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1562)                    if a != ALL_GENES_GAP_CHAR and b != ALL_GENES_GAP_CHAR}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1563) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1564)             tmp_to_trg = {x:al2[y] for x,y in al1.items() if y in al2}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1565)             trg_to_tmp = {y:x for x,y in tmp_to_trg.items()}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1566) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1567)             trg_offset = len(trg_mhc_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1568)             tmp_offset = len(tmp_mhc_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1569)             trg_peplen, tmp_peplen = len(peptide), len(templatel.pep_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1570)             if trg_peplen == tmp_peplen:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1571)                 for i in range(trg_peplen):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1572)                     trg_to_tmp[trg_offset+i] = tmp_offset+i
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1573)             else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1574)                 for i in range(3):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1575)                     trg_to_tmp[trg_offset+i] = tmp_offset+i
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1576)                 for i in [-3,-2,-1]:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1577)                     trg_to_tmp[trg_offset+trg_peplen+i] = tmp_offset+tmp_peplen+i
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1578)             trg_pmhc_seq = trg_mhc_seq + peptide
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1579)             tmp_pmhc_seq = tmp_mhc_seq + templatel.pep_seq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1580)             identities = sum(trg_pmhc_seq[i] == tmp_pmhc_seq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1581)                              for i,j in trg_to_tmp.items())/len(trg_pmhc_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1582)             identities_for_sorting = (identities - 0.01*templatel.mhc_total_chainbreak)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1583)             assert abs(identities_for_sorting-idents)<1e-3
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1584) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1585)             if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1586)                 print(f'oldnew mhc_idents: {idents:6.3f} {identities:6.3f} {pdbid}')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1587)             show_alignment(trg_to_tmp, trg_pmhc_seq, tmp_pmhc_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1588)             pmhc_alignments.append((identities_for_sorting,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1589)                                     pdbid,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1590)                                     trg_to_tmp,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1591)                                     trg_pmhc_seq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1592)                                     tmp_pmhc_seq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1593)                                     identities,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1594)             ))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1595)     else: # class II
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1596)         assert force_pmhc_pdbids is None # not implemented here yet...
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1597)         #
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1598)         trg_mhca_alseq = get_mhc_class_2_alseq('A', mhc_allele.split(',')[0])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1599)         trg_mhcb_alseq = get_mhc_class_2_alseq('B', mhc_allele.split(',')[1])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1600)         trg_mhca_seq = trg_mhca_alseq.replace(ALL_GENES_GAP_CHAR,'')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1601)         trg_mhcb_seq = trg_mhcb_alseq.replace(ALL_GENES_GAP_CHAR,'')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1602)         trg_pmhc_seq = trg_mhca_seq + trg_mhcb_seq + peptide
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1603) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1604)         sortl = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1605)         for l in my_ternary_info.itertuples():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1606)             if (l.organism!=organism or l.mhc_class!=mhc_class or
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1607)                 l.pdbid in BAD_PMHC_PDBIDS or l.pdbid in exclude_pdbids):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1608)                 continue
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1609)             mismatches_for_excluding = min(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1610)                 count_peptide_mismatches(x, l.pep_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1611)                 for x in [peptide]+alt_self_peptides)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1612) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1613)             if mismatches_for_excluding < min_pmhc_peptide_mismatches:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1614)                 if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1615)                     print('peptide too close:', peptide, l.pep_seq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1616)                           mismatches_for_excluding, alt_self_peptides)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1617)                 continue
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1618)             tmp_mhca_alseq, tmp_mhcb_alseq = l.mhc_alignseq.split('/')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1619)             idents = 0
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1620)             for a,b in zip([trg_mhca_alseq, trg_mhcb_alseq, peptide],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1621)                            [tmp_mhca_alseq, tmp_mhcb_alseq, l.pep_seq]):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1622)                 assert len(a) == len(b)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1623)                 idents += sum(x==y for x,y in zip(a,b) if x!=ALL_GENES_GAP_CHAR)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1624)             sortl.append((idents/len(trg_pmhc_seq), l.pdbid))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1625)         sortl.sort(reverse=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1626)         max_idents = sortl[0][0]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1627)         print(f'mhc max_idents: {max_idents:.3f}', mhc_allele, peptide,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1628)               my_ternary_info.loc[sortl[0][1], 'mhc_allele'],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1629)               my_ternary_info.loc[sortl[0][1], 'pep_seq'])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1630) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1631)         pmhc_alignments = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1632)         for (idents, pdbid) in sortl[:num_templates_per_run]:
768e4fa9 (phbradley 2024-01-02 09:57:13 -0800 1633)             if idents < next_best_identity_threshold_mhc*max_idents:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1634)                 break
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1635)             templatel = my_ternary_info.loc[pdbid]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1636)             tmp_mhca_alseq, tmp_mhcb_alseq = templatel.mhc_alignseq.split('/')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1637)             mhca_part = tmp_mhca_alseq.replace(ALL_GENES_GAP_CHAR,'')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1638)             mhcb_part = tmp_mhcb_alseq.replace(ALL_GENES_GAP_CHAR,'')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1639)             tmp_mhca_seq, tmp_mhcb_seq = templatel.chainseq.split('/')[:2]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1640)             assert mhca_part in tmp_mhca_seq and mhcb_part in tmp_mhcb_seq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1641)             mhca_npad = tmp_mhca_seq.find(mhca_part)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1642)             mhcb_npad = tmp_mhcb_seq.find(mhcb_part)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1643) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1644)             trg_offset, tmp_offset = 0, mhca_npad
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1645)             al1 = {i-trg_mhca_alseq[:i].count(ALL_GENES_GAP_CHAR)+trg_offset:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1646)                    i-tmp_mhca_alseq[:i].count(ALL_GENES_GAP_CHAR)+tmp_offset
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1647)                    for i,(a,b) in enumerate(zip(trg_mhca_alseq, tmp_mhca_alseq))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1648)                    if a != ALL_GENES_GAP_CHAR and b != ALL_GENES_GAP_CHAR}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1649)             trg_offset = len(trg_mhca_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1650)             tmp_offset = len(tmp_mhca_seq)+mhcb_npad
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1651)             al2 = {i-trg_mhcb_alseq[:i].count(ALL_GENES_GAP_CHAR)+trg_offset:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1652)                    i-tmp_mhcb_alseq[:i].count(ALL_GENES_GAP_CHAR)+tmp_offset
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1653)                    for i,(a,b) in enumerate(zip(trg_mhcb_alseq, tmp_mhcb_alseq))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1654)                    if a != ALL_GENES_GAP_CHAR and b != ALL_GENES_GAP_CHAR}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1655)             trg_offset = len(trg_mhca_seq)+len(trg_mhcb_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1656)             tmp_offset = len(tmp_mhca_seq)+len(tmp_mhcb_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1657)             al3 = {i+trg_offset:i+tmp_offset for i in range(CLASS2_PEPLEN)}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1658)             trg_to_tmp = {**al1, **al2, **al3}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1659)             tmp_pmhc_seq = tmp_mhca_seq + tmp_mhcb_seq + templatel.pep_seq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1660)             idents_redo = sum(trg_pmhc_seq[i] == tmp_pmhc_seq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1661)                               for i,j in trg_to_tmp.items())/len(trg_pmhc_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1662)             #print(f'oldnew mhc_idents: {idents:6.3f} {idents_redo:6.3f} {pdbid}')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1663)             assert abs(idents-idents_redo)<1e-4
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1664)             show_alignment(trg_to_tmp, trg_pmhc_seq, tmp_pmhc_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1665)             pmhc_alignments.append((idents,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1666)                                     pdbid,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1667)                                     trg_to_tmp,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1668)                                     trg_pmhc_seq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1669)                                     tmp_pmhc_seq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1670)                                     idents,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1671)             ))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1672) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1673) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1674) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1675) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1676) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1677)     tcr_alignments = {'A':[], 'B':[]}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1678) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1679)     # compute single-chain tcrdists to candidate template chains
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1680) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1681)     # drop out of the loop if vdist hits this value and we've already got enough
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1682)     # templates
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1683)     big_v_dist=50
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1684) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1685)     for ab, trg_v, trg_j, trg_cdr3 in  [['A',va,ja,cdr3a],['B',vb,jb,cdr3b]]:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1686)         trg_tcr = (organism[0]+trg_v, trg_j, trg_cdr3)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1687) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1688)         trg_msa_alignments = align_vgene_to_structure_msas(organism, trg_v)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1689) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1690)         templates = my_tcr_info[my_tcr_info.ab==ab]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1691)         templates = templates[~templates.pdbid.isin(exclude_pdbids)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1692)         if force_tcr_pdbids:
493dcb1e (phbradley 2024-05-22 13:09:16 -0700 1693)             # new allow for pdbids that look like "1oga:3o4l" where 1oga is A chain
493dcb1e (phbradley 2024-05-22 13:09:16 -0700 1694)             # and 3o4l is the B chain
493dcb1e (phbradley 2024-05-22 13:09:16 -0700 1695)             ind = 0 if ab=='A' else -1
493dcb1e (phbradley 2024-05-22 13:09:16 -0700 1696)             chain_pdbids = [x.split(':')[ind] for x in force_tcr_pdbids]
493dcb1e (phbradley 2024-05-22 13:09:16 -0700 1697)             assert all(len(x) == 4 for x in chain_pdbids)
493dcb1e (phbradley 2024-05-22 13:09:16 -0700 1698)             templates = templates[templates.pdbid.isin(chain_pdbids)]
493dcb1e (phbradley 2024-05-22 13:09:16 -0700 1699)             assert templates.shape[0], \
493dcb1e (phbradley 2024-05-22 13:09:16 -0700 1700)                 f'No template matches to force_tcr_pdbids= {force_tcr_pdbids}'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1701)         template_tcrs = [
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1702)             (x.organism[0]+x.v_gene, None, x.cdr3) for x in templates.itertuples()]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1703)         #templates['v_gene j_gene cdr3'.split()].itertuples(index=False))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1704)         closest_tcrs = [(x[0],x[1],trg_cdr3) for x in template_tcrs] # tmp v, trg cdr3
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1705)         sortl = sorted(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1706)             [(tcrdister.single_chain_distance(trg_tcr,x),
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1707)               tcrdister.single_chain_distance(trg_tcr,y),
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1708)               i)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1709)              for i,(x,y) in enumerate(zip(closest_tcrs, template_tcrs))])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1710) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1711)         alignments = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1712)         for closest_dist, dist, ind in sortl:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1713)             if dist < min_single_chain_tcrdist:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1714)                 #print('too close:', dist, trg_v, trg_j, trg_cdr3, template_tcrs[ind])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1715)                 continue
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1716)             if closest_dist > big_v_dist and len(alignments)>=num_templates_per_run:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1717)                 #print('too far:', closest_dist)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1718)                 break
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1719) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1720)             templatel = templates.iloc[ind]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1721) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1722)             # if templatel.organism == 'human' and organism == 'human':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1723)             #     msa_type = 'human'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1724)             # else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1725)             #     msa_type = 'both'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1726) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1727)             trg_to_tmp, trg_chainseq = align_vgene_to_template_pdb_chain(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1728)                 ab, organism, trg_v, trg_j, trg_cdr3, trg_msa_alignments,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1729)                 templatel.pdbid,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1730)             )
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1731) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1732)             # tmp_chainseq_to_msa = align_tcr_info_pdb_chain_to_structure_msa(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1733)             #     templatel.pdbid, templatel.ab, msa_type)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1734) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1735)             identities = sum(trg_chainseq[i]==templatel.chainseq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1736)                              for i,j in trg_to_tmp.items()) / len(trg_chainseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1737) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1738)             identities_for_sorting = identities + ternary_bonus * templatel.ternary
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1739) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1740)             alignments.append(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1741)                 (identities_for_sorting,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1742)                  templatel.pdbid,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1743)                  trg_to_tmp,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1744)                  trg_chainseq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1745)                  templatel.chainseq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1746)                  closest_dist,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1747)                  identities,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1748)                 ))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1749)         alignments.sort(reverse=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1750)         max_idents = alignments[0][0]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1751)         tcr_alignments[ab] = [x for x in alignments[:num_templates_per_run]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1752)                               if x[0] >= next_best_identity_threshold_tcr*max_idents]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1753) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1754)     # docking geometries
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1755)     # exclude same-epitope geoms
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1756)     if pick_dgeoms_using_tcrdist:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1757)         dgeom_info_by_chain = pick_dgeom_templates(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1758)             num_templates_per_run, organism, mhc_class, mhc_allele,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1759)             peptide, va, cdr3a, vb, cdr3b,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1760)             min_peptide_mismatches = min_dgeom_peptide_mismatches,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1761)             min_paired_tcrdist = min_dgeom_paired_tcrdist,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1762)             min_singlechain_tcrdist = min_dgeom_singlechain_tcrdist,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1763)             peptides_for_filtering = exclude_docking_geometry_peptides,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1764)             exclude_pdbids = exclude_pdbids,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1765)         )
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1766)     elif force_tcr_pdbids_dgeoms:
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1767)         assert force_tcr_pdbids is not None
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1768)         # require matching organism, mhc, peptide with dgeoms
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1769)         dgeom_info = my_ternary_info[my_ternary_info.pdbid.isin(force_tcr_pdbids)]
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1770)         assert dgeom_info.shape[0]>0
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1771)         dgeom_cols = 'torsion d tcr_unit_y tcr_unit_z mhc_unit_y mhc_unit_z'.split()
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1772)         print(dgeom_info[dgeom_cols])
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1773)         dgeoms = [DockingGeometry().from_dict(x) for _,x in dgeom_info.iterrows()]
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1774)         if num_runs*num_templates_per_run >= len(dgeoms):
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1775)             rep_dgeom_indices = np.random.permutation(len(dgeoms))
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1776)             rep_dgeoms = [dgeoms[x] for x in rep_dgeom_indices]
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1777)         else:
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1778)             dummy_organism = 'human' # just used for avg cdr coords
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1779)             rep_dgeoms, rep_dgeom_indices = docking_geometry.pick_docking_geometry_reps(
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1780)                 dummy_organism, dgeoms, num_runs*num_templates_per_run)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1781)     elif use_same_pmhc_dgeoms:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1782)         # require matching organism, mhc, peptide with dgeoms
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1783)         dgeom_info = my_ternary_info[my_ternary_info.mhc_class == mhc_class]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1784)         dgeom_info = dgeom_info[~dgeom_info.pdbid.isin(BAD_DGEOM_PDBIDS)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1785)         dgeom_info = dgeom_info[~dgeom_info.pdbid.isin(exclude_pdbids)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1786)         print('same mhc_class', dgeom_info.shape)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1787)         dgeom_info = dgeom_info[dgeom_info.organism == organism]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1788)         print('same organism', dgeom_info.shape)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1789)         dgeom_info = dgeom_info[dgeom_info.mhc_allele == mhc_allele]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1790)         print('same mhc_allele', dgeom_info.shape)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1791)         dgeom_info = dgeom_info[dgeom_info.pep_seq == peptide]
50f68e05 (phbradley 2025-05-06 17:01:13 -0700 1792)         print('same peptide!', dgeom_info.shape)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1793)         if dgeom_info.shape[0]==0:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1794)             print('ERROR no matching pmhc templates for dgeom:',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1795)                   organism, mhc_class, mhc_allele, peptide)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1796)             exit()
50f68e05 (phbradley 2025-05-06 17:01:13 -0700 1797)         dgeom_cols = 'torsion d tcr_unit_y tcr_unit_z mhc_unit_y mhc_unit_z'.split()
50f68e05 (phbradley 2025-05-06 17:01:13 -0700 1798)         print(dgeom_info[dgeom_cols])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1799)         dgeoms = [DockingGeometry().from_dict(x) for _,x in dgeom_info.iterrows()]
c7ab7b05 (phbradley 2025-01-22 10:11:47 -0800 1800)         if num_runs*num_templates_per_run >= len(dgeoms):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1801)             rep_dgeom_indices = np.random.permutation(len(dgeoms))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1802)             rep_dgeoms = [dgeoms[x] for x in rep_dgeom_indices]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1803)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1804)             dummy_organism = 'human' # just used for avg cdr coords
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1805)             rep_dgeoms, rep_dgeom_indices = docking_geometry.pick_docking_geometry_reps(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1806)                 dummy_organism, dgeoms, num_runs*num_templates_per_run)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1807)     elif use_opt_dgeoms:
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1808)         assert not force_tcr_pdbids_dgeoms
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1809)         rep_dgeoms = docking_geometry.load_opt_dgeoms(mhc_class)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1810)         assert len(rep_dgeoms) == 4
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1811)         rep_dgeom_indices = None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1812)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1813) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1814)         dgeom_info = my_ternary_info[my_ternary_info.mhc_class == mhc_class]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1815)         if organism=='human': # restrict to human docks
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1816)             dgeom_info = dgeom_info[dgeom_info.organism == organism]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1817)         dgeom_info = dgeom_info[~dgeom_info.pdbid.isin(BAD_DGEOM_PDBIDS)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1818)         dgeom_info = dgeom_info[~dgeom_info.pdbid.isin(exclude_pdbids)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1819)         dgeom_info = filter_templates_by_tcrdist(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1820)             dgeom_info, organism, va, cdr3a, vb, cdr3b,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1821)             min_paired_tcrdist=min_dgeom_paired_tcrdist,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1822)             min_singlechain_tcrdist=min_dgeom_singlechain_tcrdist,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1823)         )
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1824)         dgeom_info = filter_templates_by_peptide_mismatches(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1825)             dgeom_info, organism, mhc_class, exclude_docking_geometry_peptides,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1826)             min_dgeom_peptide_mismatches)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1827)         dgeoms = [DockingGeometry().from_dict(x) for _,x in dgeom_info.iterrows()]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1828) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1829)         if num_runs*num_templates_per_run > len(dgeoms):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1830)             rep_dgeom_indices = np.random.permutation(len(dgeoms))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1831)             rep_dgeoms = [dgeoms[x] for x in rep_dgeom_indices]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1832)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1833)             dummy_organism = 'human' # just used for avg cdr coords
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1834)             rep_dgeoms, rep_dgeom_indices = docking_geometry.pick_docking_geometry_reps(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1835)                 dummy_organism, dgeoms, num_runs*num_templates_per_run)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1836) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1837)     #print('dgeoms:', len(dgeoms), len(rep_dgeoms))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1838) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1839)     trg_pmhc_seq = pmhc_alignments[0][3] # check for consistency below
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1840)     trg_tcra_seq = tcr_alignments['A'][0][3] # ditto
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1841)     trg_tcrb_seq = tcr_alignments['B'][0][3] # ditto
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1842) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1843)     # now make the template pdbs
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1844) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1845)     dfl = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1846)     for run in range(num_runs):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1847)         for itmp in range(num_templates_per_run):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1848)             pmhc_al = pmhc_alignments[itmp%len(pmhc_alignments)]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1849)             tcra_al = tcr_alignments['A'][itmp%len(tcr_alignments['A'])]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1850)             tcrb_al = tcr_alignments['B'][itmp%len(tcr_alignments['B'])]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1851)             if pick_dgeoms_using_tcrdist:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1852)                 chain = ['AB','A','B'][run]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1853)                 dgeom_info = dgeom_info_by_chain[chain]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1854)                 dgeom_row = dgeom_info.iloc[itmp%dgeom_info.shape[0]]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1855)                 dgeom = DockingGeometry().from_dict(dgeom_row)
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1856)             elif force_tcr_pdbids_dgeoms:
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1857)                 dgeom_repno = (itmp*num_runs + run)%len(rep_dgeoms)
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1858)                 dgeom = rep_dgeoms[dgeom_repno]
3df8646e (phbradley 2025-06-26 21:12:17 -0700 1859)                 dgeom_row = dgeom_info.iloc[rep_dgeom_indices[dgeom_repno]]
50f68e05 (phbradley 2025-05-06 17:01:13 -0700 1860)             elif use_same_pmhc_dgeoms:
50f68e05 (phbradley 2025-05-06 17:01:13 -0700 1861)                 # order them this way so each run has diverse dgeoms...
50f68e05 (phbradley 2025-05-06 17:01:13 -0700 1862)                 dgeom_repno = (itmp*num_runs + run)%len(rep_dgeoms)
50f68e05 (phbradley 2025-05-06 17:01:13 -0700 1863)                 dgeom = rep_dgeoms[dgeom_repno]
50f68e05 (phbradley 2025-05-06 17:01:13 -0700 1864)                 dgeom_row = dgeom_info.iloc[rep_dgeom_indices[dgeom_repno]]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1865)             elif use_opt_dgeoms:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1866)                 dgeom = rep_dgeoms[itmp]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1867)                 dgeom_row = None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1868)             else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1869)                 # order them this way so each run has diverse dgeoms...
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1870)                 dgeom_repno = (itmp*num_runs + run)%len(rep_dgeoms)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1871)                 dgeom = rep_dgeoms[dgeom_repno]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1872)                 dgeom_row = dgeom_info.iloc[rep_dgeom_indices[dgeom_repno]]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1873) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1874)             pmhc_pdbid = pmhc_al[1]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1875)             pmhc_pose, pmhc_tdinfo = get_template_pose_and_tdinfo(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1876)                 pmhc_pdbid, PMHC, extra_info=extra_pmhc_templates,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1877)             )
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1878) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1879)             tcra_pdbid = tcra_al[1]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1880)             tcra_pose, tcra_tdinfo = get_template_pose_and_tdinfo(tcra_pdbid, TCR)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1881) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1882)             tcrb_pdbid = tcrb_al[1]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1883)             tcrb_pose, tcrb_tdinfo = get_template_pose_and_tdinfo(tcrb_pdbid, TCR)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1884) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1885)             # assert ((mhc_class==1 and pmhc_pose.num_chains() == 4) or
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1886)             #         (mhc_class==2 and pmhc_pose.num_chains() == 5))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1887)             assert len(tcra_pose['chains']) == 2 and len(tcrb_pose['chains']) == 2
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1888) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1889)             # copy tcrb into tcra_pose by superimposing core coords
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1890)             fix_coords = tcra_pose['ca_coords'][tcra_tdinfo.tcr_core[core_len:]]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1891)             mov_coords = tcrb_pose['ca_coords'][tcrb_tdinfo.tcr_core[core_len:]]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1892)             R, v = superimpose.superimposition_transform(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1893)                 fix_coords, mov_coords)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1894)             tcrb_pose = apply_transform_Rx_plus_v(tcrb_pose, R, v)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1895)             tcra_pose = delete_chains(tcra_pose, [1])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1896)             tcra_pose = append_chains(tcra_pose, tcrb_pose, [1])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1897) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1898)             # update tcra_tdinfo, compute tcr_stub
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1899)             # use dgeom to compute desired tcr_stub
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1900)             # transform tcra_pose
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1901)             offset = tcra_pose['chainbounds'][1]-tcrb_pose['chainbounds'][1]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1902)             tcra_tdinfo.tcr_core = (
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1903)                 tcra_tdinfo.tcr_core[:core_len] +
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1904)                 [x+offset for x in tcrb_tdinfo.tcr_core[core_len:]])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1905)             tcra_tdinfo.tcr_cdrs = (
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1906)                 tcra_tdinfo.tcr_cdrs[:4] +
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1907)                 [[x+offset,y+offset] for x,y in tcrb_tdinfo.tcr_cdrs[4:]])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1908) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1909)             assert tcra_pose['sequence'][tcra_tdinfo.tcr_cdrs[3][0]]=='C'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1910)             assert tcra_pose['sequence'][tcra_tdinfo.tcr_cdrs[7][0]]=='C'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1911)             old_tcr_stub = tcr_util.get_tcr_stub(tcra_pose, tcra_tdinfo)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1912)             new_tcr_stub = docking_geometry.stub_from_docking_geometry(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1913)                 dgeom)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1914)             # R @ old_tcr_stub['axes'].T = new_tcr_stub['axes'].T
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1915)             R = new_tcr_stub['axes'].T @ old_tcr_stub['axes']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1916)             # R @ old_tcr_stub['origin'] + v = new_tcr_stub['origin']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1917)             v = new_tcr_stub['origin'] - R@old_tcr_stub['origin']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1918)             tcra_pose = apply_transform_Rx_plus_v(tcra_pose, R, v)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1919) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1920)             #
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1921)             # copy tcr from tcra_pose into pmhc_pose
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1922)             num_pmhc_chains = mhc_class+1
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1923)             if len(pmhc_pose['chains']) > num_pmhc_chains:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1924)                 del_chains = list(range(num_pmhc_chains, len(pmhc_pose['chains'])))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1925)                 pmhc_pose = delete_chains(pmhc_pose, del_chains)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1926)             pmhc_pose = append_chains(pmhc_pose, tcra_pose, [0,1])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1927)             assert len(pmhc_pose['chains'])==2+num_pmhc_chains
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1928)             offset = pmhc_pose['chainbounds'][num_pmhc_chains]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1929)             pmhc_tdinfo.tcr_core = (
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1930)                 [x+offset for x in tcra_tdinfo.tcr_core])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1931)             pmhc_tdinfo.tcr_cdrs = (
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1932)                 [[x+offset,y+offset] for x,y in tcra_tdinfo.tcr_cdrs])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1933)             assert pmhc_pose['sequence'][pmhc_tdinfo.tcr_cdrs[3][0]] == 'C'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1934)             assert pmhc_pose['sequence'][pmhc_tdinfo.tcr_cdrs[7][0]] == 'C'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1935) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1936)             # should be the same as new_tcr_stub!
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1937)             redo_tcr_stub = tcr_util.get_tcr_stub(pmhc_pose, pmhc_tdinfo)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1938)             v_dev = norm(redo_tcr_stub['origin']-new_tcr_stub['origin'])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1939)             M_dev = norm(new_tcr_stub['axes'] @ redo_tcr_stub['axes'].T - np.eye(3))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1940)             if max(v_dev, M_dev)>5e-2:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1941)                 print('devs:', v_dev, M_dev)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1942)             assert v_dev<5e-2
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1943)             assert M_dev<5e-2
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1944) 
29f6d1ef (phbradley 2024-02-26 10:01:34 -0800 1945)             # also double-check the dgeom; this could fail if the pmhc template was
29f6d1ef (phbradley 2024-02-26 10:01:34 -0800 1946)             # not properly oriented to begin with
29f6d1ef (phbradley 2024-02-26 10:01:34 -0800 1947)             redo_dgeom = docking_geometry.get_tcr_pmhc_docking_geometry(
29f6d1ef (phbradley 2024-02-26 10:01:34 -0800 1948)                 pmhc_pose, pmhc_tdinfo)
29f6d1ef (phbradley 2024-02-26 10:01:34 -0800 1949)             dgeom_dev = docking_geometry.compute_docking_geometries_distance_matrix(
29f6d1ef (phbradley 2024-02-26 10:01:34 -0800 1950)                 [dgeom], [redo_dgeom])[0,0]
29f6d1ef (phbradley 2024-02-26 10:01:34 -0800 1951)             assert dgeom_dev<1e-1, f'ERROR big dgeom_dev: {dgeom_dev}'
29f6d1ef (phbradley 2024-02-26 10:01:34 -0800 1952) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1953)             # setup the alignment
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1954)             trg_to_tmp = dict(pmhc_al[2])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1955)             tmp_pmhc_seq = pmhc_al[4]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1956)             tmp_tcra_seq = tcra_al[4]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1957)             tmp_tcrb_seq = tcrb_al[4]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1958)             tmp_fullseq = tmp_pmhc_seq + tmp_tcra_seq + tmp_tcrb_seq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1959)             assert pmhc_pose['sequence'] == tmp_fullseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1960) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1961)             assert len(pmhc_pose['chains']) == num_pmhc_chains+2
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1962) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1963)             assert trg_pmhc_seq == pmhc_al[3]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1964)             assert trg_tcra_seq == tcra_al[3]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1965)             assert trg_tcrb_seq == tcrb_al[3]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1966) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1967)             trg_fullseq = trg_pmhc_seq + trg_tcra_seq + trg_tcrb_seq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1968)             trg_offset = len(trg_pmhc_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1969)             tmp_offset = len(tmp_pmhc_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1970)             trg_to_tmp.update({i+trg_offset:j+tmp_offset
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1971)                                for i,j in tcra_al[2].items()})
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1972)             trg_offset += len(trg_tcra_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1973)             tmp_offset += len(tmp_tcra_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1974)             trg_to_tmp.update({i+trg_offset:j+tmp_offset
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1975)                                for i,j in tcrb_al[2].items()})
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1976)             assert Counter(trg_to_tmp.values()).most_common(1)[0][1]==1
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1977) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1978)             identities = sum(trg_fullseq[i]==tmp_fullseq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1979)                              for i,j in trg_to_tmp.items())
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1980)             overall_idents = identities/len(trg_fullseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1981)             if run==0:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1982)                 print(f'identities: {itmp} {overall_idents:.3f} '
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1983)                       f'pmhc: {pmhc_al[-1]:.3f} '
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1984)                       f'tcra: {tcra_al[-1]:.3f} '
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1985)                       f'tcrb: {tcrb_al[-1]:.3f} ', va, ja, cdr3a, vb, jb, cdr3b,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1986)                       flush=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1987)                 if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1988)                     for i,j in sorted(trg_to_tmp.items()):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1989)                         a,b = trg_fullseq[i], tmp_fullseq[j]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1990)                         star = '*' if a==b else ' '
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1991)                         print(f'{i:4d} {j:4d} {a} {star} {b}')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1992) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1993)             outpdbfile = f'{outfile_prefix}_{run}_{itmp}.pdb'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1994)             #pmhc_pose.dump_pdb(outpdbfile)
768e4fa9 (phbradley 2024-01-02 09:57:13 -0800 1995)             pmhc_pose = set_chainbounds_and_renumber(
768e4fa9 (phbradley 2024-01-02 09:57:13 -0800 1996)                 pmhc_pose, list(pmhc_pose['chainbounds'])) # new 2023-10-29
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1997)             dump_pdb(pmhc_pose, outpdbfile)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1998)             #print('made:', outpdbfile)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 1999) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2000)             trg_pmhc_seqs = ([trg_mhc_seq, peptide] if mhc_class==1 else
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2001)                              [trg_mhca_seq, trg_mhcb_seq, peptide])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2002)             trg_cbseq = '/'.join(trg_pmhc_seqs+[trg_tcra_seq, trg_tcrb_seq])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2003) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2004)             alignstring = ';'.join(f'{i}:{j}' for i,j in trg_to_tmp.items())
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2005) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2006)             if pmhc_pdbid in my_pmhc_info.index:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2007)                 pmhc_allele=my_pmhc_info.loc[pmhc_pdbid, 'mhc_allele']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2008)             else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2009)                 pmhc_allele=my_ternary_info.loc[pmhc_pdbid, 'mhc_allele']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2010) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2011)             outl = OrderedDict(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2012)                 run=run,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2013)                 template_no=itmp,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2014)                 target_chainseq=trg_cbseq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2015)                 overall_idents=overall_idents,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2016)                 pmhc_pdbid=pmhc_pdbid,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2017)                 pmhc_idents=pmhc_al[-1],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2018)                 pmhc_allele=pmhc_allele,#my_pmhc_info.loc[pmhc_pdbid, 'mhc_allele'],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2019)                 tcra_pdbid=tcra_pdbid,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2020)                 tcra_idents=tcra_al[-1],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2021)                 tcra_v   =my_tcr_info.loc[(tcra_pdbid,'A'), 'v_gene'],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2022)                 tcra_j   =my_tcr_info.loc[(tcra_pdbid,'A'), 'j_gene'],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2023)                 tcra_cdr3=my_tcr_info.loc[(tcra_pdbid,'A'), 'cdr3'],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2024)                 tcrb_pdbid=tcrb_pdbid,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2025)                 tcrb_idents=tcrb_al[-1],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2026)                 tcrb_v   =my_tcr_info.loc[(tcrb_pdbid,'B'), 'v_gene'],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2027)                 tcrb_j   =my_tcr_info.loc[(tcrb_pdbid,'B'), 'j_gene'],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2028)                 tcrb_cdr3=my_tcr_info.loc[(tcrb_pdbid,'B'), 'cdr3'],
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2029)                 dgeom_pdbid=f'opt{itmp}' if dgeom_row is None else dgeom_row.pdbid,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2030)                 template_pdbfile=outpdbfile,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2031)                 target_to_template_alignstring=alignstring,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2032)                 identities=identities,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2033)                 target_len=len(trg_fullseq),
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2034)                 template_len=len(tmp_fullseq),
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2035)             )
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2036)             dfl.append(outl)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2037)     assert len(dfl) == num_runs * num_templates_per_run
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2038)     return pd.DataFrame(dfl)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2039) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2040) def genes_ok_for_modeling(organism, va, ja, vb, jb, verbose=True):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2041) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2042)     if organism not in all_genes:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2043)         print(f'ERROR unrecognized organism: "{organism}" expected one of',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2044)               all_genes.keys())
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2045)         return False
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2046) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2047)     for g in [va, ja, vb, jb]:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2048)         if g not in all_genes[organism]:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2049)             print(f'ERROR: unrecognized gene: "{g}" for organism "{organism}"')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2050)             # for error output:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2051)             dbfile = tcrdist.basic.path_to_db / tcrdist.basic.db_file
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2052)             print('check the ids in', dbfile, 'for organism', organism)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2053)             return False
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2054) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2055)     if (organism,va) not in both_structure_alignments.index:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2056)         if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2057)             print('ERROR: no va alignment:', organism, va)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2058)         return False
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2059) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2060)     if (organism,vb) not in both_structure_alignments.index:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2061)         if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2062)             print('ERROR: no vb alignment:', organism, vb)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2063)         return False
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2064) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2065)     va_seq = get_v_seq_up_to_cys(organism, va)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2066)     ja_seq = get_j_seq_after_cdr3(organism, ja)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2067)     vb_seq = get_v_seq_up_to_cys(organism, vb)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2068)     jb_seq = get_j_seq_after_cdr3(organism, jb)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2069) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2070)     if ( '*' in va_seq+ja_seq+vb_seq+jb_seq or
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2071)          va_seq[-1] != 'C' or vb_seq[-1] != 'C'):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2072)         if verbose:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2073)             print('ERROR bad seqs:', va, va_seq, ja, ja_seq,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2074)                   vb, vb_seq, ja, jb_seq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2075)         return False
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2076)     return True
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2077) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2078) def check_genes_for_modeling(tcr_db):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2079)     all_ok = True
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2080)     for index, targetl in tcr_db.iterrows():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2081)         ok = genes_ok_for_modeling(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2082)             targetl.organism, targetl.va, targetl.ja, targetl.vb, targetl.jb,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2083)             verbose=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2084)         if not ok:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2085)             print('ERROR bad tcr genes at index=', index)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2086)         if targetl.mhc_class == 1:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2087)             alseq = get_mhc_class_1_alseq(targetl.mhc)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2088)             if alseq is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2089)                 ok = False
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2090)                 print(f'ERROR bad mhc {targetl.mhc} at index=', index)
50f68e05 (phbradley 2025-05-06 17:01:13 -0700 2091)                 #print('expected one of', ' '.join(sorted(mhc_class_1_alfas.keys())))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2092)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2093)             assert targetl.mhc_class == 2, 'mhc_class should be 1 or 2'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2094)             assert targetl.mhc.count(',')==1, \
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2095)                 ('class 2 mhc should contain both alleles, e.g. "DRA*01:01,DRB1*15:01" '
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2096)                  'or "DQA1*01:02,DQB1*05:01" or "H2EKa,H2EKb"')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2097)             for ab, allele in zip('AB', targetl.mhc.split(',')):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2098)                 alseq = get_mhc_class_2_alseq(ab, allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2099)                 if alseq is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2100)                     ok = False
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2101)                     print(f'ERROR bad class 2{ab} mhc {allele} (from {targetl.mhc})',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2102)                           'at index=', index)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2103)                     print('Expected one of',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2104)                           ' '.join(sorted(mhc_class_2_alfas[ab].keys())))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2105)             if len(targetl.peptide) != 11:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2106)                 ok = False
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2107)                 print('ERROR: class 2 peptides should all be 11 residues long:',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2108)                       'the 9 residue core (e.g. from NetMHCIIpan) plus one',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2109)                       'residue on either side')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2110)                 print('For longer peptides, please either predict the core from',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2111)                       'sequence or break the peptide up into overlapping 11mers')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2112)         all_ok = all_ok and ok
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2113) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2114) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2115)     return all_ok
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2116) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2117) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2118) def setup_for_alphafold(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2119)         tcr_db,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2120)         outdir,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2121)         organism=None, # if None, should be present in tcr_db
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2122)         min_pmhc_count=None,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2123)         max_pmhc_count=None,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2124)         random_seed=1, # for subsampling tcrs
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2125)         num_runs=3,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2126)         clobber=True,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2127)         exclude_self_peptide_docking_geometries=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2128)         alt_self_peptides_column=None, # this column should be comma-separated
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2129)         exclude_pdbids_column=None, # this column should be comma-separated
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2130)         force_tcr_pdbids_column=None, # this column should be comma-separated
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2131)         force_pmhc_pdbids_column=None, # this column should be comma-separated
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2132)         targetid_prefix_suffix='',
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2133)         use_opt_dgeoms=False,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2134)         **kwargs,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2135) ):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2136)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2137)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2138)     assert outdir.endswith('/')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2139)     if use_opt_dgeoms:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2140)         assert num_runs == 1
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2141)     required_cols = 'va ja cdr3a vb jb cdr3b mhc_class mhc peptide'.split()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2142)     if organism is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2143)         required_cols.append('organism')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2144)     for col in required_cols:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2145)         assert col in tcr_db.columns, f'Need {col} column in tcr_db'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2146) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2147)     #assert not any(tcr_db.mhc.str.startswith('E*'))
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2148) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2149)     tcr_db = tcr_db.copy()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2150)     tcr_db['mhc_peptide'] = (
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2151)         tcr_db.mhc.str.replace('*','',regex=False).str.replace(':','',regex=False)+
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2152)         '_'+tcr_db.peptide)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2153)     if organism is not None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2154)         if 'organism' in tcr_db.columns:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2155)             assert all(tcr_db.organism==organism)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2156)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2157)             tcr_db['organism'] = organism
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2158)     if ('targetid' in tcr_db and tcr_db.targetid.value_counts().max()==1 and
50f68e05 (phbradley 2025-05-06 17:01:13 -0700 2159)         num_runs==1 and not targetid_prefix_suffix and tcr_db.targetid.isna().sum()==0):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2160)         trust_targetid = True
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2161)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2162)         trust_targetid = False
50f68e05 (phbradley 2025-05-06 17:01:13 -0700 2163)     print(f'sequtil.py setup_for_alphafold trust_targetid: {trust_targetid}')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2164) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2165) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2166)     # doesnt do anything if init has already been called (I don't think)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2167) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2168)     if not exists(outdir):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2169)         os.mkdir(outdir)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2170)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2171)         assert clobber, 'outdir already exists: '+outdir
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2172) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2173)     #optionally filter to peptide mhc combos with min/max counts ##########
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2174)     if min_pmhc_count is not None or max_pmhc_count is not None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2175)         tcr_db.sort_values('mhc_peptide', inplace=True) ## IMPORTANT B/C MASKING
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2176)         random.seed(random_seed) # shuffling of epitope tcrs
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2177)         assert min_pmhc_count is not None and max_pmhc_count is not None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2178)         mhc_peptides = tcr_db.mhc_peptide.drop_duplicates().to_list()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2179)         mask = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2180)         for mhc_peptide in mhc_peptides:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2181)             count = np.sum(tcr_db.mhc_peptide==mhc_peptide)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2182)             if count < min_pmhc_count:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2183)                 mhc_peptide_mask = [False]*count
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2184)             elif count <= max_pmhc_count:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2185)                 mhc_peptide_mask = [True]*count
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2186)             else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2187)                 mhc_peptide_mask = [True]*max_pmhc_count+ [False]*(count-max_pmhc_count)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2188)                 random.shuffle(mhc_peptide_mask)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2189)             mask.extend(mhc_peptide_mask)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2190) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2191)         old_size = tcr_db.shape[0]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2192)         tcr_db = tcr_db[mask].copy()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2193)         print('subset tcr_db:', old_size, tcr_db.shape[0])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2194)         counts = tcr_db.mhc_peptide.value_counts().to_list()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2195)         assert min_pmhc_count <= min(counts) and max(counts) <= max_pmhc_count
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2196) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2197)     tcr_db_outfile = outdir+'tcr_db.tsv'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2198)     tcr_db.to_csv(tcr_db_outfile, sep='\t', index=False)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2199) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2200)     tcr_db = tcr_db.reset_index(drop=True)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2201) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2202)     print('check genes for modeling', tcr_db.shape[0])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2203)     # for index, targetl in tcr_db.iterrows():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2204)     #     if not genes_ok_for_modeling(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2205)     #             targetl.organism, targetl.va, targetl.ja, targetl.vb, targetl.jb):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2206)     #         print('ERROR bad genes:', index, targetl.va, targetl.ja,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2207)     #               targetl.vb, targetl.jb)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2208)     #         assert False
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2209)     #         exit()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2210)     assert check_genes_for_modeling(tcr_db)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2211) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2212)     targets_dfl = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2213)     seen_targetids = set() # for sanity checking only
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2214)     for index, targetl in tcr_db.iterrows():
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2215)         if trust_targetid:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2216)             targetid_prefix = targetl.targetid
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2217)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2218)             targetid_prefix = (f'T{index:05d}_{targetl.mhc_peptide}'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2219)                                f'{targetid_prefix_suffix}')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2220)         print('START', index, tcr_db.shape[0], targetid_prefix)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2221)         outfile_prefix = f'{outdir}{targetid_prefix}'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2222)         if exclude_self_peptide_docking_geometries:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2223)             exclude_docking_geometry_peptides = [targetl.peptide]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2224)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2225)             exclude_docking_geometry_peptides = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2226)         if alt_self_peptides_column is not None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2227)             assert exclude_docking_geometry_peptides
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2228)             alt_self_peptides = targetl[alt_self_peptides_column].split(',')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2229)             if exclude_self_peptide_docking_geometries:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2230)                 exclude_docking_geometry_peptides.extend(alt_self_peptides)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2231)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2232)             alt_self_peptides=None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2233) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2234)         if exclude_pdbids_column is not None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2235)             exclude_pdbids = targetl[exclude_pdbids_column]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2236)             if pd.isna(exclude_pdbids):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2237)                 exclude_pdbids = None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2238)             else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2239)                 exclude_pdbids = exclude_pdbids.split(',')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2240)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2241)             exclude_pdbids = None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2242) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2243)         if force_tcr_pdbids_column is not None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2244)             force_tcr_pdbids = targetl[force_tcr_pdbids_column]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2245)             if pd.isna(force_tcr_pdbids):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2246)                 force_tcr_pdbids = None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2247)             else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2248)                 force_tcr_pdbids = force_tcr_pdbids.split(',')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2249)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2250)             force_tcr_pdbids = None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2251) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2252)         if force_pmhc_pdbids_column is not None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2253)             force_pmhc_pdbids = targetl[force_pmhc_pdbids_column]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2254)             if pd.isna(force_pmhc_pdbids):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2255)                 force_pmhc_pdbids = None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2256)             else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2257)                 force_pmhc_pdbids = force_pmhc_pdbids.split(',')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2258)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2259)             force_pmhc_pdbids = None
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2260) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2261)         all_run_info = make_templates_for_alphafold(
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2262)             targetl.organism, targetl.va, targetl.ja, targetl.cdr3a,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2263)             targetl.vb, targetl.jb, targetl.cdr3b,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2264)             targetl.mhc_class, targetl.mhc, targetl.peptide, outfile_prefix,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2265)             exclude_docking_geometry_peptides=exclude_docking_geometry_peptides,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2266)             num_runs = num_runs,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2267)             alt_self_peptides=alt_self_peptides,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2268)             exclude_pdbids = exclude_pdbids,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2269)             force_tcr_pdbids = force_tcr_pdbids,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2270)             force_pmhc_pdbids = force_pmhc_pdbids,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2271)             use_opt_dgeoms = use_opt_dgeoms,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2272)             **kwargs,
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2273)         )
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2274) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2275)         for run in range(num_runs):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2276)             info = all_run_info[all_run_info.run==run]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2277)             assert info.shape[0] == 4#num templates
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2278)             targetid = targetid_prefix if trust_targetid else f'{targetid_prefix}_{run}'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2279)             trg_cbseq = set(info.target_chainseq).pop()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2280)             alignfile = f'{outdir}{targetid}_alignments.tsv'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2281)             info.to_csv(alignfile, sep='\t', index=False)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2282)             outl = pd.Series(targetl)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2283)             outl['targetid'] = targetid
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2284)             outl['target_chainseq'] = trg_cbseq
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2285)             outl['templates_alignfile'] = alignfile
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2286)             targets_dfl.append(outl)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2287)             assert targetid not in seen_targetids
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2288)             seen_targetids.add(targetid)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2289)         sys.stdout.flush()
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2290) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2291)         # save partial work... since this is so freakin slow
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2292)         outfile = outdir+'targets.tsv'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2293)         pd.DataFrame(targets_dfl).to_csv(outfile, sep='\t', index=False)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2294) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2295)     outfile = outdir+'targets.tsv'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2296)     targets = pd.DataFrame(targets_dfl)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2297)     targets.to_csv(outfile, sep='\t', index=False)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2298)     print('made:', outfile)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2299)     return targets
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2300) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2301) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2302) def get_mhc_chain_trim_positions(chainseq, organism, mhc_class, mhc_allele, chain=None):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2303)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2304)     '''
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2305)     assert mhc_class in [1,2]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2306)     if mhc_class==2:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2307)         assert chain in ['A','B']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2308)         alseq = get_mhc_class_2_alseq(chain, mhc_allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2309)         if alseq is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2310)             print('ERROR: None alseq:', organism, mhc_class, mhc_allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2311)             return [None]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2312)         if chain == 'A':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2313)             #H2AKa EPQGGLQNIATGKHNLEI
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2314)             #DRA   EAQGALANIAVDKANLEI
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2315)             ref_alseq = 'HVIIQ.AEFYLNPDQSGEFMFDFDGDEIFHVDMAKKETVWRLEEFGRFASFEAQGALANIAVDKANLEIMTKRSN'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2316)             ref_helices = ['EAQGALANIAVDKANLEI']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2317)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2318)             #H2AKb   YWNKQ..YLERTRAELDTVCRHN
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2319)             #DRB1*01 YWNSQKDLLEQRRAAVDTYCRHN
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2320)             ref_alseq = 'FVHQFQPFCYFTNGTQRIRLVIRYIYNREEYVRFDSDVGEYRAVTELGRPDAEYWNKQ..YLERTRAELDTVCRHNYEKTETPTS'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2321)             ref_helices = ['YWNKQ..YLERTRAELDTVCRHN']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2322) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2323)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2324)         alseq = get_mhc_class_1_alseq(mhc_allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2325)         if alseq is None:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2326)             print('ERROR: None alseq:', organism, mhc_class, mhc_allele)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2327)             return [None]
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2328)         #A02: GETRKVKAHSQTHRVDLGT and KWEAAHVAEQLRAYLEGTCVEW
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2329)         #D-B: RETQKAKGQEQWFRVSLRN and KWEQSGAAEHYKAYLEGECVEW
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2330)         if organism=='mouse':
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2331)             ref_alseq = 'GPHSMRYFETAVSRPGLEEPRYISVGYVDNKEFVRFDSDAENPRYEPRAPWMEQEGPEYWERETQKAKGQEQWFRVSLRNLLGYYNQSAGGSHTLQQMSGCDLGSDWRLLRGYLQFAYEGRDYIALNEDLKTWTAADMAAQITRRKWEQSGAAEHYKAYLEGECVEWLHRYLKNGNATLLR'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2332)             ref_helices = ['RETQKAKGQEQWFRVSLRN', 'KWEQSGAAEHYKAYLEGECVEW']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2333)         else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2334)             ref_alseq = 'GSHSMRYFFTSVSRPGRGEPRFIAVGYVDDTQFVRFDSDAASQRMEPRAPWIEQEGPEYWDGETRKVKAHSQTHRVDLGTLRGYYNQSEAGSHTVQRMYGCDVGSDWRFLRGYHQYAYDGKDYIALKEDLRSWTAADMAAQTTKHKWEAAHVAEQLRAYLEGTCVEWLRRYLENG'
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2335)             ref_helices = ['GETRKVKAHSQTHRVDLGT', 'KWEAAHVAEQLRAYLEGTCVEW']
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2336) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2337)     assert len(alseq) == len(ref_alseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2338)     alseqseq = alseq.replace(ALL_GENES_GAP_CHAR, '')
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2339)     if chainseq != alseqseq:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2340)         #print('WARNING: mhc seq mismatch: chainseq=', chainseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2341)         #print('WARNING: mhc seq mismatch: alseqseq=', alseqseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2342)         as2cs = blosum_align(alseqseq, chainseq)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2343)     else:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2344)         as2cs = {i:i for i in range(len(chainseq))}
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2345) 
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2346)     positions = []
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2347)     for helix in ref_helices:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2348)         start = ref_alseq.index(helix)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2349)         for pos in range(start, start+len(helix)):
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2350)             if alseq[pos] != ALL_GENES_GAP_CHAR:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2351)                 i = pos-alseq[:pos].count(ALL_GENES_GAP_CHAR)
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2352)                 if i in as2cs:
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2353)                     positions.append(as2cs[i])
dc4bf8a4 (phbradley 2023-10-21 07:25:02 -0700 2354)     return positions
